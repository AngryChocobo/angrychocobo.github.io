<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2019-08-10T14:06:16.424Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io//atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io//images/avatar.png</logo>
    <icon>https://angrychocobo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[js基础-变量和类型01]]></title>
        <id>https://angrychocobo.github.io//post/js-ji-chu-bian-liang-he-lei-xing-01</id>
        <link href="https://angrychocobo.github.io//post/js-ji-chu-bian-liang-he-lei-xing-01">
        </link>
        <updated>2019-08-10T13:50:58.000Z</updated>
        <content type="html"><![CDATA[<!-- more 朝花因故未采撷，夕拾依旧烂漫天。从小处开始，一点一点上下求索，漫漫长路就会全然走在脚下。-->
<p>现在是8月10日周六晚21:51。<br>
心情不悲不喜，大概是因为没有被老板@。<br>
昨天买了一个type-c扩展坞，很不错，然而不支持小米手机，华为可以。嗯，华为手机很强，想换（并不）；华为很强，想进（真的）。<br>
该学习了，按照知识清单来逐个尝试回答，就当是面试了。</p>
<h3 id="01-javascript规定了几种语言类型">01. <code>JavaScript</code>规定了几种语言类型</h3>
<p>QAQ啥是语言类型？。。。我只知道基本数据类型，是string, number, boolean, undefined, null,  NaN, Symbol, 以及引用数据类型object。</p>
<p>红宝书答案：</p>
<blockquote>
<p>ECMAScript有5种简单数据类型，也叫做基本数据类型： Undefined，Null，Boolean，Number，String，以及1种复杂数据结构Object。实际上ES6加入了新的简单数据结构Symbol，所以一共是7种</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客项目reducer拆分和中间件]]></title>
        <id>https://angrychocobo.github.io//post/bo-ke-xiang-mu-reducer-chai-fen-he-zhong-jian-jian</id>
        <link href="https://angrychocobo.github.io//post/bo-ke-xiang-mu-reducer-chai-fen-he-zhong-jian-jian">
        </link>
        <updated>2019-08-05T11:30:13.000Z</updated>
        <content type="html"><![CDATA[<p>今天放假，继续撸博客项目。</p>
<blockquote>
<p>早晨开始自我怀疑，是不是要继续做下去，当时觉得项目好像没什么意思，即使做出来了自己真的会去用嘛？然后就开始盲目的搜索其他接口，想做点别的项目，还好及时停止了搜索，去打扫了大半个小时的卫生，又洗了几件衣服，吃了外卖，睡一个午觉。 庆幸自己脱离了糟糕的状态，差点放弃~  不过也算是浪费了上午+半个下午了。</p>
</blockquote>
<h2 id="主要进行了如下工作">主要进行了如下工作：</h2>
<ul>
<li>首页样式变更</li>
<li>Header、Footer拆分</li>
<li>reducer拆分，分为了word、post和global</li>
<li>action也拆出来了</li>
<li>使用中间件进行了posts列表的获取</li>
</ul>
<h2 id="遇到的问题">遇到的问题</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5679414"><label class="task-list-item-label" for="task-item-5679414"> 目前设计是在顶层组件去判断global.errorMsg是不是存在，存在就弹message，如接口错误等errorMsg，并且将更新errorMsg的action也放到了globalReducer中；以及global.isFetching会让ui显示加载Spin动画，也是全局的，这样一来Skeleton由于没有数据，就无法显示了。</label></li>
</ul>
<h2 id="反思">反思</h2>
<p>细节理解不够深刻，中间件也只是copy paste阶段，觉得这里应该是高阶函数的知识不懂，导致的懵逼。待补全相关知识（flag）。</p>
<p>记录临时代码</p>
<pre><code class="language-js">export function fetchWords() {

    // Thunk middleware 知道如何处理函数。
    // 这里把 dispatch 方法通过参数的形式传给函数，
    // 以此来让它自己也能 dispatch action。

    return function (dispatch) {

        // 首次 dispatch：更新应用的 state 来通知
        // API 请求发起了。

        dispatch(requestWords())

        // thunk middleware 调用的函数可以有返回值，
        // 它会被当作 dispatch 方法的返回值传递。

        // 这个案例中，我们返回一个等待处理的 promise。
        // 这并不是 redux middleware 所必须的，但这对于我们而言很方便。

        return fetch(`http://127.0.0.1:3001/words`)
            .then(function (response) {
                return response.json();
            },
                // 不要使用 catch，因为会捕获
                // 在 dispatch 和渲染中出现的任何错误，
                // 导致 'Unexpected batch number' 错误。
                // https://github.com/facebook/react/issues/6895
                error =&gt; console.log('An error occurred.', error)
            )
            .then(json =&gt;
            // 可以多次 dispatch！
            // 这里，使用 API 请求结果来更新应用的 state。
            {
                if (json) {
                    setTimeout(() =&gt; {
                        dispatch(receiveWords(json));
                    }, 2000);
                } else {
                    dispatch(fetchError());
                }
            }
            );
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redux中间件临时记录]]></title>
        <id>https://angrychocobo.github.io//post/redux-zhong-jian-jian-lin-shi-ji-lu</id>
        <link href="https://angrychocobo.github.io//post/redux-zhong-jian-jian-lin-shi-ji-lu">
        </link>
        <updated>2019-08-05T11:27:32.000Z</updated>
        <content type="html"><![CDATA[<p>export function fetchWords() {</p>
<pre><code>// Thunk middleware 知道如何处理函数。
// 这里把 dispatch 方法通过参数的形式传给函数，
// 以此来让它自己也能 dispatch action。

return function (dispatch) {

    // 首次 dispatch：更新应用的 state 来通知
    // API 请求发起了。

    dispatch(requestWords())

    // thunk middleware 调用的函数可以有返回值，
    // 它会被当作 dispatch 方法的返回值传递。

    // 这个案例中，我们返回一个等待处理的 promise。
    // 这并不是 redux middleware 所必须的，但这对于我们而言很方便。

    return fetch(`http://127.0.0.1:3001/words`)
        .then(function (response) {
            return response.json();
        },
            // 不要使用 catch，因为会捕获
            // 在 dispatch 和渲染中出现的任何错误，
            // 导致 'Unexpected batch number' 错误。
            // https://github.com/facebook/react/issues/6895
            error =&gt; console.log('An error occurred.', error)
        )
        .then(json =&gt;
        // 可以多次 dispatch！
        // 这里，使用 API 请求结果来更新应用的 state。
        {
            if (json) {
                setTimeout(() =&gt; {
                    dispatch(receiveWords(json));
                }, 2000);
            } else {
                dispatch(fetchError());
            }

        }
        );
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用fetch请求接口并设置cookie未生效的原因]]></title>
        <id>https://angrychocobo.github.io//post/shi-yong-fetch-qing-qiu-jie-kou-bing-she-zhi-cookie-wei-sheng-xiao-de-yuan-yin</id>
        <link href="https://angrychocobo.github.io//post/shi-yong-fetch-qing-qiu-jie-kou-bing-she-zhi-cookie-wei-sheng-xiao-de-yuan-yin">
        </link>
        <updated>2019-08-01T16:11:47.000Z</updated>
        <content type="html"><![CDATA[<p>//使用fetch，必须加上参数credentials: 'include'才可以成功设置cookie</p>
<p>//但是这样一来又有了跨域的问题。晕，先睡了</p>
<p>似乎是跨域引起的无法设置cookie，若使用ajax的话需要加上设置<code>xhrFields: { withCredentials: true }</code>。emm 很迷。懵逼。</p>
<p>那么fetch呢..</p>
<p>还有坑，chrome中，通过localhost访问项目不能看到服务端设置的cookie。又一个迷。懵逼x2</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不使用reject  让create-react-app支持less的方法]]></title>
        <id>https://angrychocobo.github.io//post/rang-create-react-app-bu-shi-yong-reject-zhi-chi-less-de-fang-fa</id>
        <link href="https://angrychocobo.github.io//post/rang-create-react-app-bu-shi-yong-reject-zhi-chi-less-de-fang-fa">
        </link>
        <updated>2019-07-31T14:17:00.000Z</updated>
        <content type="html"><![CDATA[<p>create-react-app是默认支持sass的，但是less需要做一些特殊处理：</p>
<ol>
<li>对创建好的create-react-app项目安装依赖包：</li>
</ol>
<pre><code class="language-node">npm install react-app-rewired --save
npm install react-app-rewire-less --save
</code></pre>
<ol start="2">
<li>修改项目的package.json：</li>
</ol>
<pre><code class="language-json">  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;react-scripts start&quot;,
    &quot;build&quot;: &quot;react-scripts build&quot;,
    &quot;test&quot;: &quot;react-scripts test&quot;,
    &quot;eject&quot;: &quot;react-scripts eject&quot;
  }
</code></pre>
<ol start="3">
<li>项目根目录创建文件config-overrides.js</li>
</ol>
<pre><code class="language-js">const {
    override,
    fixBabelImports,
    addLessLoader
} = require('customize-cra');

module.exports = override(
    fixBabelImports('import', {
        libraryName: 'antd',
        libraryDirectory: 'es',
        style: true,
    }),
    addLessLoader({
        javascriptEnabled: true,
        modifyVars: {
            '@primary-color': '#1DA57A'
        },
    })
);
</code></pre>
<p>顺便解释一下，网上搜到的一些帖子已经过时，上述方法是通过Ant Design配置主题的方法中抽取的，可以实现需求。嘿嘿，如果你是用ant design当作ui库开发的话，就一举两得啦～</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js Event Loop学习  异步执行顺序 ]]></title>
        <id>https://angrychocobo.github.io//post/js-shi-jian-xun-huan-xue-xi-1</id>
        <link href="https://angrychocobo.github.io//post/js-shi-jian-xun-huan-xue-xi-1">
        </link>
        <updated>2019-07-29T12:40:06.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">console.log('start')

setTimeout(function() {
    console.log('timeout')
}, 0)

new Promise(function(resolve) {
    console.log('promise')
    resolve()
}).then(function() {
    console.log('promise resolved')
})

console.log('end')
</code></pre>
<p>在js的<code>Event Loop</code>中，每一次循环叫做一个<code>tick</code></p>
<h2 id="macrotasktask-和-microtaskjobs">macrotask(task) 和 microtask(jobs)</h2>
<p><strong>在ECMAScript中，microtask称为jobs，macrotask可称为task</strong><br>
task包括</p>
<ul>
<li>script(整体代码)</li>
<li>setTimeout, setInterval, setImmediate,</li>
<li>I/O<br>
ajax请求不属于宏任务，js线程遇到ajax请求，会将请求交给对应的http线程处理，一旦请求返回结果，就会将对应的回调放入宏任务队列，等请求完成执行</li>
</ul>
<p>jobs包括</p>
<ul>
<li>process.nextTick</li>
<li>Promise then</li>
<li>Object.observe(已废弃)</li>
<li>MutationObserver(html5新特性)<br>
运行机制：</li>
</ul>
<ol>
<li>执行一个宏任务（执行栈中没有就从事件队列中获取）</li>
<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>
<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>
<li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li>
<li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）<br>
<img src="https://dailc.github.io/staticResource/blog/basicKnowledge/singlethreadeventloop/js_macrotask_microtask.png" alt=""></li>
</ol>
<p>在每次tick运行时，会从task queue中依次执行，task执行过程中遇到microtask，便将其放到microtasks queue中；当task执行完毕后，检查microtask queue是否为空，若不为空则依次执行microtask queue的microtask；最后，这次tick执行完毕，开始执行第二次tick</p>
<h2 id="浏览器包含哪些进程">浏览器包含哪些进程？</h2>
<ul>
<li>Browser进程：浏览器的主进程（负责协调、主控），只有一个。作用有
<ul>
<li>负责浏览器界面显示，与用户交互。如前进，后退等</li>
<li>负责各个页面的管理，创建和销毁其他进程</li>
<li>将Renderer进程得到的内存中的Bitmap，绘制到用户界面上</li>
</ul>
</li>
<li>第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建</li>
<li>GPU进程：最多一个，用于3D绘制等</li>
<li>浏览器渲染进程（浏览器内核）（Renderer进程，内部是多线程的）：默认每个Tab页面一个进程，互不影响。主要作用为网络资源的管理，下载等</li>
</ul>
<h2 id="浏览器渲染进程浏览器内核的常驻线程">浏览器渲染进程（浏览器内核）的常驻线程</h2>
<p><img src="https://dailc.github.io/staticResource/blog/basicKnowledge/singlethreadeventloop/browser_inner_thread.png" alt=""></p>
<ul>
<li>GUI渲染线程<br>
负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</li>
<li>JS引擎线程<br>
也称为JS内核，负责处理Javascript脚本程序。（例如V8引擎）。JS引擎线程负责解析Javascript脚本，运行代码。JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序。同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li>
<li>事件触发线程<br>
归属于浏览器而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）。当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中。当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。</li>
<li>定时触发器线程<br>
传说中的setInterval与setTimeout所在线程。浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）。因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）。注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。</li>
<li>异步http请求线程<br>
在XMLHttpRequest在连接后是通过浏览器新开一个线程请求。将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。</li>
</ul>
<p>实际上每个任务都会有一个对应的任务源 target source(任务源)，每个任务都放到对应任务源的任务队列中，每个任务源根据不同浏览器或其他引擎 (例如 nodejs) 的实现，自己安排不同的优先级，从而调控某类任务的执行顺序。例如浏览器认为鼠标事件频率很高，所以可以把鼠标事件的任务源优先级设的更高，而 nodejs 中 i/o 优先级更高，就针对此类任务源可以提升执行优先级。</p>
<p>参考文献：</p>
<ul>
<li><a href="http://www.dailichun.com/2018/01/21/js_singlethread_eventloop.html">浏览器中的进程和线程</a></li>
<li><a href="https://github.com/creeperyang/blog/issues/21">从Promise来看JavaScript中的Event Loop、Tasks和Microtasks</a></li>
<li><a href="https://tasaid.com/blog/20180118132704.html">JavaScript 中的 task queues</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[两数之和1 ]]></title>
        <id>https://angrychocobo.github.io//post/liang-shu-zhi-he-1</id>
        <link href="https://angrychocobo.github.io//post/liang-shu-zhi-he-1">
        </link>
        <updated>2019-07-27T14:54:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br>
示例:<br>
给定 nums = [2, 7, 11, 15], target = 9<br>
因为 nums[0] + nums[1] = 2 + 7 = 9<br>
所以返回 [0, 1]</p>
</blockquote>
<h2 id="解法1-直接双循环莽">解法1 直接双循环莽</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
    for(var i=0;i&lt;nums.length;i++){
        for(var j=i+1;j&lt;nums.length;j++){
            if(nums[i]+nums[j]==target)
                return [i,j];
        }
    }
};
</code></pre>
<p>时间复杂度：O(n2)</p>
<h2 id="解法2-两遍哈希表">解法2 两遍哈希表</h2>
<p>首先，js是没有内置的哈希表数据结构的。所以先用java来做这道题，日后记得学习哈希表知识，并尝试自己用js实现一个出来！ @自己</p>
<pre><code class="language-java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i &lt; nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) {
                return new int[] { i, map.get(complement) };
            }
        }
        throw new IllegalArgumentException(&quot;No two sum solution&quot;);
    }
}
</code></pre>
<h2 id="解法3-一遍哈希表">解法3 一遍哈希表</h2>
<pre><code class="language-java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException(&quot;No two sum solution&quot;);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[两数之和2 输入有序数组]]></title>
        <id>https://angrychocobo.github.io//post/liang-shu-zhi-he-2-shu-ru-you-xu-shu-zu</id>
        <link href="https://angrychocobo.github.io//post/liang-shu-zhi-he-2-shu-ru-you-xu-shu-zu">
        </link>
        <updated>2019-07-27T14:36:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目要求">题目要求</h2>
<blockquote>
<p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。<br>
说明:<br>
返回的下标值（index1 和 index2）不是从零开始的。<br>
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br>
示例:<br>
输入: numbers = [2, 7, 11, 15], target = 9<br>
输出: [1,2]<br>
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>
</blockquote>
<h2 id="解法一-直接双重循环">解法一： 直接双重循环</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
   for(var i = 0; i&lt;nums.length; i++) {
       for(var j = i + 1; j&lt;nums.length; j++) {
           if ((nums[i] + nums[j] == target) &amp;&amp; (i &lt; j)) {
               return [i+1, j+1];
           }
       }
   }
};
</code></pre>
<p>上来直接想到的方法，很笨，但是奏效。执行用时380 ms，内存消耗35 MB<br>
时间复杂度为O（n2）</p>
<h2 id="解法二-双指针">解法二： 双指针</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
    var i = 0, j = nums.length -1;
		while (i &lt; j) {
        if (nums[i] + nums[j] == target) {
            return [i+1, j+1]; 
        }
        if(nums[i] + nums[j] &gt; target) {
            j--;
        } else {
            i++;
        }
	}
};
</code></pre>
<p>充分理由给定的数组是<code>有序</code>的这一特性。执行用时80 ms，内存消耗35.2 MB<br>
时间复杂度为O(n)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://angrychocobo.github.io//post/hello-gridea</id>
        <link href="https://angrychocobo.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>