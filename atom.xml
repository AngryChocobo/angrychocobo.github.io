<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2020-05-31T02:32:35.223Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io/atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io/images/avatar.png</logo>
    <icon>https://angrychocobo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[不使用递归如何实现遍历树？]]></title>
        <id>https://angrychocobo.github.io/post/bu-shi-yong-di-gui-ru-he-shi-xian-bian-li-shu/</id>
        <link href="https://angrychocobo.github.io/post/bu-shi-yong-di-gui-ru-he-shi-xian-bian-li-shu/">
        </link>
        <updated>2020-05-31T02:16:13.000Z</updated>
        <content type="html"><![CDATA[<p>起因是实现vue功能函数，向下查找组件的所有后代组件，找到name符合要求的，递归版本的非常容易实现：</p>
<pre><code class="language-js">function _findComponentsDownward(
  component,
  componentName,
  components = []
) {
  const children = component.$children;
  if (children) {
    for (const child of children) {
      if (child.$options.name === componentName) {
        components.push(child);
      }
      _findComponentsDownward(child, componentName, components);
    }
  }
  return components;
}
</code></pre>
<p>但是非递归的要如何实现呢？实际上可以用栈来实现～</p>
<pre><code class="language-js">function findComponentsDownward(component, componentName) {
  const components = [];
  const stack = [];
  stack.push(component);
  while (stack.length) {
    const target = stack.pop();
    if (target.$options.name === componentName) {
      components.push(target);
    }
    const children = target.$children;
    if (children) {
      children.forEach((child) =&gt; {
        stack.push(child);
      });
    }
  }
</code></pre>
<h3 id="原理">原理：</h3>
<ol>
<li>将根组件入栈</li>
<li>循环直到栈为空</li>
<li>取出栈顶组件，判断是否是目标</li>
<li>将该组件的子组件依次入栈（如果存在子组件）</li>
</ol>
<h3 id="感悟">感悟</h3>
<p>实际上应该是树的后续遍历的非递归实现方法。自己数据结构太菜了，导致没有思路</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实现自己的ui库]]></title>
        <id>https://angrychocobo.github.io/post/shi-xian-zi-ji-de-ui-ku/</id>
        <link href="https://angrychocobo.github.io/post/shi-xian-zi-ji-de-ui-ku/">
        </link>
        <updated>2020-05-30T09:51:21.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>npm初始化相关的操作步骤略</p>
</blockquote>
<h3 id="跨组件传值的方法">跨组件传值的方法：</h3>
<ul>
<li>
<p>provide/inject， 缺点： provide的值可以被自组件修改，并且不是响应式的 (暂时的理解)</p>
</li>
<li>
<p>自定义dispatch和broadcast （element也是这么干的）</p>
<p>要实现的 dispatch 和 broadcast 方法，将具有以下功能：</p>
</li>
</ul>
<p>在子组件调用 dispatch 方法，向上级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该上级组件已预先通过 $on 监听了这个事件；<br>
相反，在父组件调用 broadcast 方法，向下级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该下级组件已预先通过 $on 监听了这个事件。</p>
<pre><code class="language-js">// emittter.js 
function broadcast(componentName, eventName, params) {
 this.$children.forEach((child) =&gt; {
   const name = child.$options.name;
   if (name === componentName) {
     child.$emit.apply(child, [eventName].concat(params));
   } else {
     broadcast.apply(child, [componentName, eventName].concat([params]));
   }
 });
}
export default {
 methods: {
   dispatch(componentName, eventName, params) {
     console.log(&quot;inner dispatch&quot;, this.$parent);
     let parent = this.$parent || this.$root;
     let name = parent.$options.name;

     while (parent &amp;&amp; (!name || name !== componentName)) {
       parent = parent.$parent;

       if (parent) {
         name = parent.$options.name;
       }
     }
     if (parent) {
       parent.$emit.apply(parent, [eventName].concat(params));
     }
   },
   broadcast(componentName, eventName, params) {
     broadcast.call(this, componentName, eventName, params);
   },
 },
};

</code></pre>
<p>boradcast和dispatch原理就是递归的向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">或</mi></mrow><annotation encoding="application/x-tex">parent或</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">或</span></span></span></span>children寻找name和调用时传入的componentName匹配的vue组件实例，找到了的话，就让它自己<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">由</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">以</mi></mrow><annotation encoding="application/x-tex">emit一个event，由于组件可以</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span></span></span></span>on自己$emit的事件，所以实现了通信的效果。（自己说话自己接收）</p>
<h4 id="这种方法的不足之处">这种方法的不足之处</h4>
<ol>
<li>子组件的name如果修改了，或者没写name，那么通信就会失败; 如果name相同，并且监听了相同的eventName，那么这些相同name的组件都会触发对应的函数。（由于是业务组件，所以这个缺点可以避免）</li>
<li>mounted顺序是先自组件，后父组件，那么如果子组件mounted时候去dispatch，父组件mounted时候<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>n</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">收</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">应</mi><mi mathvariant="normal">的</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">决</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">案</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">父</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">在</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi mathvariant="normal">阶</mi><mi mathvariant="normal">段</mi><mi mathvariant="normal">去</mi></mrow><annotation encoding="application/x-tex">on，就会接收不到对应的event。解决方案： 父组件在created阶段去</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">收</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">应</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">案</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">父</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">阶</span><span class="mord cjk_fallback">段</span><span class="mord cjk_fallback">去</span></span></span></span>on</li>
</ol>
<h4 id="语法分析">语法分析</h4>
<ol>
<li>broadcast和dispatch二者都是递归操作，为何broadcast把函数抽取出去了呢？</li>
<li>child.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>l</mi><mi>y</mi><mo>(</mo><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mo separator="true">,</mo><mo>[</mo><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>]</mo><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>t</mi><mo>(</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>s</mi><mo>)</mo><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">为</mi><mi mathvariant="normal">什</mi><mi mathvariant="normal">么</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">改</mi><mi mathvariant="normal">成</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">emit.apply(child, [eventName].concat(params)); 为什么这里不改成 child.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">什</span><span class="mord cjk_fallback">么</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">改</span><span class="mord cjk_fallback">成</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">d</span><span class="mord">.</span></span></span></span>emit.call(child, eventName,params) 呢？</li>
</ol>
<h3 id=""></h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue事件监听器的细节记录]]></title>
        <id>https://angrychocobo.github.io/post/vue-shi-jian-jian-ting-qi-de-xi-jie-ji-lu/</id>
        <link href="https://angrychocobo.github.io/post/vue-shi-jian-jian-ting-qi-de-xi-jie-ji-lu/">
        </link>
        <updated>2020-05-30T05:10:31.000Z</updated>
        <content type="html"><![CDATA[<p>首先存在如下的dom结构</p>
<pre><code class="language-vue">// Button.vue
&lt;div @click=&quot;handleDivClick&quot;&gt;
    &lt;button class=&quot;my-btn&quot; @click=&quot;handleClick&quot;&gt;
      &lt;slot&gt;&lt;/slot&gt;
    &lt;/button&gt;
  &lt;/div&gt;
</code></pre>
<ol>
<li>默认事件是冒泡的，所以，点击button，调用handleClick之后，会继续调用handleDivClick</li>
<li>想要阻止冒泡，可以用两种办法解决 :
<ol>
<li>handleClick(e) {   e.stopPropagation() }</li>
<li>&lt;button @click.stop=&quot;handleClick&quot;&gt;</li>
</ol>
</li>
<li>若表单中只有一个button，并且没有设置type=&quot;button&quot;，默认type会是submit，点击就会触发表单提交，导致页面刷新，同理有两种办法：
<ol>
<li>handleClick(e) {   e.preventDefault() }</li>
<li>&lt;button @click.prevent=&quot;handleClick&quot;&gt;</li>
</ol>
</li>
<li>虽然触发页面提交成功了，但是实际上如果没有阻止冒泡的话，div还是会触发点击事件的，所以如果像阻止冒泡并阻止事件的默认行为，可以将以上的方法结合使用，原生的写法省略，vue的话就得： &lt;button  @click.stop.prevent=&quot;handleClick&quot;&gt;，反过来也是可以的 @click.prevent.stop</li>
<li>如果div @click.self， button @click ，那么点击button时候，不会触发div的click函数， 表现出来的效果类似阻止冒泡，但是实际上还是冒泡了，如果在div外再套一层dom，就可以看出来冒泡的效果。这个self是如何实现的呢？ 也简单： if ( event.target === event.currentTarget ) { //do something }</li>
<li>passive 一般是用在滚动事件上的修饰符，用来提高移动端的滚动体验。可以提高性能的原因是浏览器每次触发滚动事件时候都会去判断是否存在preventDefault，设置了passive true以后就可以跳过该步骤，从而提高性能（显而易见，passive和 prevent不会同时存在）</li>
<li>native，本意是“原生”，官方给出的解释是<code>监听组件根元素的原生事件</code>，只能用在组件上，比如以上的Button组件， 调用的地方如果 &lt;Button  @click=&quot;show&quot; /&gt; ，则只会触发show函数，无法触发handleClick。设置了 &lt;Button  @click.native=&quot;show&quot; /&gt;  就可以先触发handleClick，再触发show</li>
<li></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue原理学习]]></title>
        <id>https://angrychocobo.github.io/post/vue-yuan-li-xue-xi/</id>
        <link href="https://angrychocobo.github.io/post/vue-yuan-li-xue-xi/">
        </link>
        <updated>2020-05-29T14:59:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="响应式系统的原理">响应式系统的原理</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Canvas学习记录]]></title>
        <id>https://angrychocobo.github.io/post/canvas-xue-xi-ji-lu/</id>
        <link href="https://angrychocobo.github.io/post/canvas-xue-xi-ji-lu/">
        </link>
        <updated>2020-05-22T14:53:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="遇到的问题">遇到的问题</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6124211"><label class="task-list-item-label" for="task-item-6124211"> 高分屏的canvas内容发虚</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7485777"><label class="task-list-item-label" for="task-item-7485777"> 绘制圆 context.arc 中的弧度值大小，并不随顺时针/逆时针而改变，换句话说，逆时针画一个四分之三的圆弧，应该为： context.arc(x, y, radius,  0, Math.PI * 0.5, true)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1839495"><label class="task-list-item-label" for="task-item-1839495"> 如果当前代码的path没有封闭，closePath会自动进行封闭</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css动效之LoveLive]]></title>
        <id>https://angrychocobo.github.io/post/css-dong-xiao-zhi-lovelive/</id>
        <link href="https://angrychocobo.github.io/post/css-dong-xiao-zhi-lovelive/">
        </link>
        <updated>2020-05-21T12:40:10.000Z</updated>
        <content type="html"><![CDATA[<p>首先找到了LoveLive的字体</p>
<h3 id="分析动效构成">分析动效构成</h3>
<ol>
<li>出现两个L，第二个L缓慢向右侧移动</li>
<li>移动到固定位置后，从Love的o开始往右侧以此出现，每个字母将要完成自己的动画时下一个字母开始出现</li>
<li>每个字母都是从底部压缩慢慢撑起高度</li>
<li>最后的感叹号完成后，小延迟</li>
<li>LoLive！从左到右依次被替换为ラブライブ！</li>
<li>同时存在粉色樱花效果</li>
<li>ラブライブ！全部出现后，文字颜色开始逐步变为粉色，同时School idol project开始从底部浮现</li>
<li>结束</li>
</ol>
<h3 id="开始实现">开始实现</h3>
<ul>
<li>每个字母似乎都是独立的，所以得对每一个字母进行设置动画</li>
</ul>
<h3 id="遇到的难点">遇到的难点</h3>
<ul>
<li>如何将文字从压扁的状态向上方恢复，首先想到的是transform: scale() 从0到1，或者transform: rotateX() 从90deg到0。 但是这样一来，效果是文字从中间向两边“膨胀”。  解决方案： transform-origin: bottom</li>
<li>继续上个问题，虽然实现了从底部压扁恢复，但是transform-origin:bottom会从dom的底部为起点，但是文字存在line-height，导致看起来文字离origin点有一些距离。   解决方案： 1. 使用图片替换文字   2. 把文字font-size设置得比较大，line-height设置得比较小，但是度不好把控</li>
<li>text-shadow属性，并不能做到原视频的效果</li>
<li>ラブライブ！替换效果，要求从左到右依次出现。  解决方案：做一个遮罩，动画开始后遮罩往右移动，但是由于文字有text-shadow效果，导致出戏，可以通过加入粉色樱花效果来遮盖</li>
<li>那么粉色樱花效果该如何实现呢？简单来看，樱花是随着ラブライブ！出现而散开，散开一段时间后消散。   解决方案：</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[transform: scale的一些小坑]]></title>
        <id>https://angrychocobo.github.io/post/transform-scale-de-yi-xie-xiao-keng/</id>
        <link href="https://angrychocobo.github.io/post/transform-scale-de-yi-xie-xiao-keng/">
        </link>
        <updated>2020-05-19T13:48:27.000Z</updated>
        <content type="html"><![CDATA[<p>想要的效果：hover时候内容变大，但是发现文字会抖动 ，大概代码如下</p>
<pre><code class="language-css">&lt;div class=&quot;list&quot;&gt;
      &lt;div class=&quot;item green&quot;&gt;我是一个绿色的div&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
     .list:hover .green {
        transform: scale(2);
        transition-duration: 1s;
      }
&lt;/style&gt;
</code></pre>
<p>暂时的解决方案是</p>
<pre><code class="language-css">.list:hover .green {
    transform: scale(2)  translateZ(0);
    transition-duration: 1s;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[未来一个月的计划]]></title>
        <id>https://angrychocobo.github.io/post/wei-lai-yi-ge-yue-de-ji-hua/</id>
        <link href="https://angrychocobo.github.io/post/wei-lai-yi-ge-yue-de-ji-hua/">
        </link>
        <updated>2020-05-18T14:57:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="vue-chat">vue-chat</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4920924"><label class="task-list-item-label" for="task-item-4920924"> 检查当前的逻辑，确保基本功能正常</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4219447"><label class="task-list-item-label" for="task-item-4219447"> 提交到腾讯云，暂不使用docker</label></li>
</ul>
<h2 id="深入基础">深入基础</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1251728"><label class="task-list-item-label" for="task-item-1251728"> css变形动画transform</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8141394"><label class="task-list-item-label" for="task-item-8141394"> css动画animation</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4102098"><label class="task-list-item-label" for="task-item-4102098"> canvas绘图</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-415801"><label class="task-list-item-label" for="task-item-415801"> echarts</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1516512"><label class="task-list-item-label" for="task-item-1516512"> d3.js</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7439281"><label class="task-list-item-label" for="task-item-7439281"> 正则表达式</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2849634"><label class="task-list-item-label" for="task-item-2849634"> Promise</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新姿势]]></title>
        <id>https://angrychocobo.github.io/post/xin-zi-shi/</id>
        <link href="https://angrychocobo.github.io/post/xin-zi-shi/">
        </link>
        <updated>2020-05-11T08:42:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="git">git</h3>
<ul>
<li>git stash 将临时代码提交到脏工作区
<ul>
<li>通过git stash apply恢复；</li>
<li>通过git stash list查看stash列表</li>
<li>通过git stash drop [stash名] 或git stash pop 删除</li>
</ul>
</li>
</ul>
<h3 id="promise">Promise</h3>
<ul>
<li>Promise.race(Array),数组中任何一个promise的状态变为rejected 或者 resolved，该函数就会返回，并使用这个promise对象的值进行resolve或者reject。可以用来执行<strong>超时检测</strong>s</li>
</ul>
<h3 id="todo-app">todo app</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-12427"><label class="task-list-item-label" for="task-item-12427">   一个mac应用，设置随机时间，切换主题颜色</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9851587"><label class="task-list-item-label" for="task-item-9851587">   切换密码显示、隐藏的组件</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript踩坑]]></title>
        <id>https://angrychocobo.github.io/post/typescript-cai-keng/</id>
        <link href="https://angrychocobo.github.io/post/typescript-cai-keng/">
        </link>
        <updated>2020-04-06T14:09:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="放到vue项目中后提示import-vue页面报错">放到vue项目中后，提示import vue页面报错</h2>
<p>在项目目录创建x.d.ts文件：</p>
<pre><code class="language-ts">declare module '*.vue' {
  import Vue from 'vue'
  export default Vue
}
</code></pre>
<p>之后在ts的配置文件种引入:</p>
<pre><code class="language-json">&quot;include&quot;: [
    // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题
    &quot;./src/**/*.ts&quot;
  ],
</code></pre>
<p>最后如果发现错误还存在的话，重启一下vscode，就会发现报错消失了（坑我半小时）<br>
燃鹅，此时vscode点击vue文件的路径跳转的话，会发现打开的不是我们声明的vue文件，而是声明的类型文件</p>
<h2 id="使用interface报错module-parse-failed-the-keyword-interface-is-reserved">使用interface报错：Module parse failed: The keyword 'interface' is reserved</h2>
<h2 id="调用window等全局对象">调用window等全局对象</h2>
]]></content>
    </entry>
</feed>