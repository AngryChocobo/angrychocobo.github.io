<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2019-11-10T12:01:20.671Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io//atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io//images/avatar.png</logo>
    <icon>https://angrychocobo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[Vue Todo项目]]></title>
        <id>https://angrychocobo.github.io//post/vue-todo-xiang-mu</id>
        <link href="https://angrychocobo.github.io//post/vue-todo-xiang-mu">
        </link>
        <updated>2019-10-31T11:00:58.000Z</updated>
        <content type="html"><![CDATA[<p>首先html结构直接从网上扒下来，然后删删改改，使用Vue实现...</p>
<p>这里首次感受到了相较于React，Vue的强大和便利之处：可以很方便的在html页面进行修改，不像React一样需要用jsx重写，略high。</p>
<h3 id="记录遇到的问题">记录遇到的问题</h3>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1895025"><label class="task-list-item-label" for="task-item-1895025"> 双击todo，使其可编辑的回调函数，React是onDoubleClick，而Vue是dblclick，实际上原生就是ondblclick，之前一直以为是doubleclick</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4836577"><label class="task-list-item-label" for="task-item-4836577"> 双击todo，使其可编辑，input显示出来自动获取焦点</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2816380"><label class="task-list-item-label" for="task-item-2816380"> 子组件input如何修改父组件传递的input值？</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8474126"><label class="task-list-item-label" for="task-item-8474126"> 可通过子组件调用$emit来实现，并且子组件获得的props key和传递的不同</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9835417"><label class="task-list-item-label" for="task-item-9835417"> 父组件为子组件传递回调函数，由子组件调用</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5703085"> <Todos v-bind:todos="todos"> 和 <Todos todos="todos"><label class="task-list-item-label" for="task-item-5703085"> <Todos v-bind:todos="todos"> 和 <Todos todos="todos">区别</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5361389"> 如何实现 <a v-bind:href="#/item"> 答： <label class="task-list-item-label" for="task-item-5361389"> 如何实现 <a v-bind:href="#/item"> 答： <a v-bind:href="'#' + item "></label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1250165"><label class="task-list-item-label" for="task-item-1250165"> 如何调用父组件的自定义指令</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-724306"><label class="task-list-item-label" for="task-item-724306"> 为什么key只能是数字或字符串？</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5078129"><label class="task-list-item-label" for="task-item-5078129"> v-if切换组件时，是否会导致子组件的create和destory ?</label></p>
</li>
</ul>
<pre><code class="language-vue">使用自定义指令实现
&lt;input type=&quot;text&quot; ...  v-todo-focus=&quot;todo === editedTodo&quot;&gt;
directives: {
			'todo-focus': function (el, binding) {
				if (binding.value) {
					el.focus();
				}
			}
		}
</code></pre>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5137230"><label class="task-list-item-label" for="task-item-5137230"> 删除所有todo时，todos为空数组，但为何computed为空时，字段都delete了呢？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-49843"><label class="task-list-item-label" for="task-item-49843"> @click="someFun(value)" 绑定的不是函数的返回值？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1611400"><label class="task-list-item-label" for="task-item-1611400"> 如何通过watch实现修改todos时自动记录到localStorage ?</label></li>
</ul>
<pre><code class="language-vue">watch: {
        todos: {
            deep: true,
            handler: todoStorage.save
        }
    }
</code></pre>
<h3 id="可以优化的点">可以优化的点</h3>
<ul>
<li>按键是否回车可以改为 @keyup.enter=&quot;xx&quot; 来处理</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入学习React生命周期函数]]></title>
        <id>https://angrychocobo.github.io//post/shen-ru-xue-xi-react-sheng-ming-zhou-qi-han-shu</id>
        <link href="https://angrychocobo.github.io//post/shen-ru-xue-xi-react-sheng-ming-zhou-qi-han-shu">
        </link>
        <updated>2019-10-28T13:29:00.000Z</updated>
        <content type="html"><![CDATA[<p>工作中简单使用了生命周期函数已经无法满足我了。想要深入地了解生命周期函数，并了解在版本升级的变化原因...</p>
<h2 id="概览">概览</h2>
<p>组件的生命周期函数可以分为三个阶段： Mounting、Updating、Unmounting</p>
<h3 id="mounting阶段的生命周期函数">Mounting阶段的生命周期函数</h3>
<ul>
<li>constructor(props)</li>
<li>(static)get­Derived­State­From­Props(props, state)</li>
<li>render()</li>
<li>componentDidMount()</li>
<li><s>UNSAFE_componentWillMount()</s></li>
</ul>
<h3 id="updating阶段的生命周期函数">Updating阶段的生命周期函数</h3>
<ul>
<li>(static)getDerivedStateFromProps(props, state)</li>
<li>shouldComponentUpdate(nextProps, nextState)</li>
<li>render()</li>
<li>getSnapshotBeforeUpdate(prevProps, prevState)</li>
<li>componentDidUpdate(prevProps, prevState, snapshot)</li>
<li><s>UNSAFE_componentWillUpdate()</s></li>
<li><s>UNSAFE_componentWillReceiveProps(nextProps, nextState)</s></li>
</ul>
<h3 id="unmounting阶段的生命周期函数">Unmounting阶段的生命周期函数</h3>
<ul>
<li>componentWillUnmount()</li>
</ul>
<h3 id="error-handling">Error Handling</h3>
<ul>
<li>(static)getDerivedStateFromError()</li>
<li>componentDidCatch()</li>
</ul>
<h2 id="细节">细节</h2>
<h3 id="constructorprops">constructor(props)</h3>
<ul>
<li>如果你不需要局部state或者绑定函数，不需要实现（implement）它</li>
<li>应该首先super(props)，否则this.props将为undefined，导致bug（调用了super后，如果没有props，this.props为{} ）</li>
<li>不应该在这里setState（ReactV16.11测试，这样做会报错，并且并不会生效）</li>
<li><strong>Avoid copying props into state! Only use this pattern if you intentionally want to ignore prop updates.</strong> 不要用props初始化state，除非你特意想要忽略props的更新</li>
</ul>
<h3 id="render">render()</h3>
<ul>
<li>在shouldComponentUpdate()返回false时不会执行</li>
</ul>
<h3 id="在shouldcomponentupdatenextprops-nextstate">在shouldComponentUpdate(nextProps, nextState)</h3>
<ul>
<li>🤔️在初始化和调用forceState()时不会被调用</li>
<li>不要依赖它来“阻止”渲染，因为这会导致Bug。考虑使用内置的PureComponent，而不是手工编写shouldComponentUpdate()。PureComponent对props和state进行了浅层比较，减少了您跳过必要更新的可能性</li>
<li><strong>返回false不会阻止子组件由于他们的state改变重新render</strong>(Note that returning false does not prevent child components from re-rendering when their state changes.)</li>
<li>在这里进行深层次的检查如JSON.stringify()是很浪费性能的</li>
<li>当前，如果shouldComponentUpdate()返回false，则不会调用unsafe_ComponentWillUpdate()、render()和ComponentDidUpdate()。<br>
在将来，React可能会将shouldComponentUpdate()视为提示而不是严格的指令，并且返回false仍然可能导致重新呈现组件。 (why ???)</li>
</ul>
<blockquote>
<p>不返回值，以及返回null等值会如何？<br>
答：不返回值会报错提示: shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false. 返回null被认为是false<br>
为什么从输出看，nextState已经被改变了？<br>
答：是的。setState一定会改变state，但是不一定引起重新render，这里要注意shouldComponentUpdate并不是真的阻止了setState（我之前理解错误）</p>
</blockquote>
<h3 id="componentdidmount">componentDidMount()</h3>
<ul>
<li>在这里绑定事件处理程序是比较好的</li>
<li>在这里访问接口也很合适</li>
</ul>
<h3 id="getsnapshotbeforeupdateprevprops-prevstate">getSnapshotBeforeUpdate(prevProps, prevState)</h3>
<ul>
<li>任何返回值都会被传递给componentDidUpdate</li>
</ul>
<h3 id="static-getderivedstatefromerrorerror">static getDerivedStateFromError(error)</h3>
<ul>
<li>在&quot;render&quot;阶段捕获错误</li>
<li>只能捕获子组件的错误</li>
</ul>
<h3 id="componentdidupdateprevprops-prevstate-snapshot">componentDidUpdate(prevProps, prevState, snapshot)</h3>
<ul>
<li>首次render之后不会执行</li>
<li>操作dom的合适时机</li>
<li>在这里可以设计条件来重新请求接口</li>
<li>在这里可以setState，但是要注意不要造成无限循环</li>
<li>getSnapshotBeforeUpdate()会为componentDidUpdate传递snapshot参数，否则为undefined</li>
</ul>
<h3 id="unsafe_componentwillreceivepropsnextprops-nextstate">UNSAFE_componentWillReceiveProps(nextProps, nextState)</h3>
<ul>
<li>不安全的方法，推荐使用新Api：getDerivedStateFromProps</li>
<li>直接使用componentWillReceiveProps会提示Warning</li>
<li>在Reavt V17 componentWillReceiveProps将不能使用</li>
<li>和getDerivedStateFromProps方法不能同时存在</li>
<li><strong>和getDerivedStateFromProps区别1: 组件直接渲染和子组件直接渲染不会被调用</strong></li>
<li><strong>和getDerivedStateFromProps区别1: 无返回值，后者返回state</strong></li>
</ul>
<h3 id="getderivedstatefromprops">getDerivedStateFromProps()</h3>
<ul>
<li>触发时机很多： constructor()之后、接收到 &quot;new&quot; props、 setState()之后、 forceState()之后</li>
<li>它存在只为了一个目的，提供了从父组件props的改变来更新子组件内部state的功能（getDerivedStateFromProps exists for only one purpose. It enables a component to update its internal state as the result of changes in props.）</li>
<li>派生状态应该谨慎使用。我们看到的所有派生state的问题最终都可以归结为(1)无条件地从props更新state  (2)每当props和state不匹配时更新state</li>
</ul>
<blockquote>
<p>For a long time, the lifecycle componentWillReceiveProps was the only way to update state in response to a change in props without an additional render. In version 16.3, we introduced a replacement lifecycle, getDerivedStateFromProps to solve the same use cases in a safer way.<br>
React 16.4 included a bugfix for getDerivedStateFromProps which caused some existing bugs in React components to reproduce more consistently.<br>
The getDerivedStateFromProps bugfix in 16.4 makes derived state more predictable.</p>
</blockquote>
<blockquote>
<p>一个常见的错误观念就是getDerivedStateFromProps和getDerivedStateFromProps仅在props改变时被调用，实际上在父组件重新render时它们就会被调用，而不管之前的和现在的props有没有差异。（A common misconception is that getDerivedStateFromProps and componentWillReceiveProps are only called when props “change”. These lifecycles are called any time a parent component rerenders, regardless of whether the props are “different” from before.）</p>
</blockquote>
<h2 id="疑问列表">疑问列表</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1881404"><label class="task-list-item-label" for="task-item-1881404"> static函数是什么?</label></li>
</ul>
<blockquote>
<p>getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.</p>
</blockquote>
<ul>
<li>[ ]</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React ToDo项目]]></title>
        <id>https://angrychocobo.github.io//post/react-todo-xiang-mu</id>
        <link href="https://angrychocobo.github.io//post/react-todo-xiang-mu">
        </link>
        <updated>2019-10-26T13:07:40.000Z</updated>
        <content type="html"><![CDATA[<p>经典的ToDo列表项目，自己按照网上的效果实现一次，认真完成。</p>
<h3 id="需求分析">需求分析</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-963412"><label class="task-list-item-label" for="task-item-963412"> 回车新建</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-979327"><label class="task-list-item-label" for="task-item-979327"> item content 双击编辑</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2982853"><label class="task-list-item-label" for="task-item-2982853"> item 前的checkbox点击可切换完成状态</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-951241"><label class="task-list-item-label" for="task-item-951241"> item 后的x点击删除该项</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3734613"> 至少有一条todo时，输入栏前存在按钮，点击可以设置所有item为<label class="task-list-item-label" for="task-item-3734613"> 至少有一条todo时，输入栏前存在按钮，点击可以设置所有item为`完成`</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7135457"><label class="task-list-item-label" for="task-item-7135457"> 至少有一条todo时，下方出现阴影的提示栏，</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6931761"> 至少有一条todo时，下方出现状态筛选<label class="task-list-item-label" for="task-item-6931761"> 至少有一条todo时，下方出现状态筛选`[All, Active, Completed]`</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1849016"> 至少有一条完成的todo时，状态筛选栏右侧出现<code>清除全部完成</code><label class="task-list-item-label" for="task-item-1849016"> 至少有一条完成的todo时，状态筛选栏右侧出现`清除全部完成`按钮</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9974769"><label class="task-list-item-label" for="task-item-9974769"> 切换状态改变hash</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-126311"><label class="task-list-item-label" for="task-item-126311"> 数据持久存储到localstorage</label></li>
</ul>
<h3 id="数据">数据</h3>
<p>state(状态): [All, Active, Completed]</p>
<p>基本原型（真鸡儿丑)：<br>
<img src="https://chocoboimg-1258068192.cos.ap-chengdu.myqcloud.com/Pasted%20Graphic_%E5%89%AF%E6%9C%AC.png" alt=""></p>
<p>样式难点：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5573488"><label class="task-list-item-label" for="task-item-5573488"> 自定义的checkBox （demo是切换图片实现的）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-538817"><label class="task-list-item-label" for="task-item-538817"> 下方功能区的三层阴影</label></li>
</ul>
<p>功能难点：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4317486"><label class="task-list-item-label" for="task-item-4317486"> 切换状态筛选改变hash后，刷新页面，状态的筛选初始值应该从url加载</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3956894"><label class="task-list-item-label" for="task-item-3956894"> NavLink，当匹配的hash不存在时应该默认选中All，但是... (demo以空作为All状态，匹配不到则All被选中)</label></li>
</ul>
<h2 id="重构">重构</h2>
<details>
<summary>本阶段JSX 展开查看</summary>
<pre><code class="language-jsx">import React from 'react';
import { NavLink, HashRouter } from 'react-router-dom';
import './App.css';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      todos: [{
        id: 1,
        text: '你好',
        isCompleted: false
      }],
      filter: window.location.hash.split(&quot;/&quot;).pop() || 'All',
      inputText: ''
    };
    this.states = ['All', 'Active', 'Completed'];
  }

  handleDelete = (id) =&gt; {
    this.setState({
      todos: this.state.todos.filter(todo =&gt; todo.id !== id)
    });
  }

  handleInputKeyDown = (event) =&gt; {
    if (event.keyCode === 13) {
      const { todos, inputText } = this.state;
      this.setState({
        todos: [...todos, {
          id: todos.length + 1,
          text: inputText,
          isCompleted: false
        }],
        inputText: ''
      })
    }
  }

  handleToggleState = todo =&gt; {
    const { todos } = this.state;
    // debugger;
    // let/ newTodo = Object.assign({}, todo); //这里疑似修改了原数据
    let newTodo = todos.find(v =&gt; v === todo);
    newTodo.isCompleted = !newTodo.isCompleted;
    this.setState({
      // todos: Object.assign([], todos,
      // Object.assign(newTodo, { isCompleted: !newTodo.isCompleted }))
      todos
    });
  }

  handleChangeTodoText = todo =&gt; {
    const { todos } = this.state;
    let newTodo = todos.find(v =&gt; v === todo);
    newTodo.isEditing = true;
    this.setState({
      todos
    });
  }

  refreshTodos = () =&gt; {
    const { todos } = this.state;
    // 可以考虑仅修改一项
    this.setState({
      todos: todos.map(todo =&gt; Object.assign({}, todo, { isEditing: false }))
    });
  }

  handleCompleteAll = () =&gt; {
    const { todos } = this.state;
    this.setState({
      todos: todos.map(todo =&gt; Object.assign({}, todo, { isCompleted: true }))
    });
  }

  render() {
    const { inputText, todos, filter } = this.state;
    return (
      &lt;div className=&quot;App&quot; &gt;
        &lt;HashRouter&gt;
          &lt;header className=&quot;App-header&quot;&gt;
            &lt;h1&gt;todos&lt;/h1&gt;
            &lt;div className=&quot;header&quot;&gt;
              {todos.filter(todo =&gt; todo.isCompleted === filter || filter === &quot;All&quot;).length &gt; 0 &amp;&amp; &lt;button onClick={this.handleCompleteAll}&gt;全部完成&lt;/button&gt;}
              &lt;input
                className=&quot;inputText&quot;
                value={inputText}
                placeholder=&quot;What need to be done ？&quot;
                onChange={e =&gt; this.setState({ inputText: e.target.value })}
                onKeyDown={this.handleInputKeyDown}
              /&gt;
            &lt;/div&gt;
            {todos.length &gt; 0 &amp;&amp; (
              &lt;React.Fragment&gt;
                &lt;ul className=&quot;todos&quot;&gt;
                  {todos.filter(todo =&gt; (filter === &quot;Active&quot; &amp;&amp; !todo.isCompleted) || (filter === &quot;Completed&quot; &amp;&amp; todo.isCompleted) || filter === &quot;All&quot;).map((todo) =&gt; {
                    return (
                      &lt;li key={todo.id} className=&quot;todo&quot;&gt;
                        &lt;input
                          type=&quot;checkbox&quot;
                          checked={todo.isCompleted}
                          onChange={() =&gt; this.handleToggleState(todo)}
                        /&gt;
                        &lt;p
                          className={todo.isCompleted ? &quot;completed&quot; : &quot;&quot;}
                          onDoubleClick={() =&gt; this.handleChangeTodoText(todo)}
                          onBlur={this.refreshTodos}
                        &gt;
                          {todo.isEditing ? (
                            &lt;input value={todo.text} onChange={e =&gt; {
                              const newTodos = [...todos];
                              const newTodo = newTodos.find(v =&gt; v === todo);
                              newTodo.text = e.target.value;
                              this.setState({
                                todos: newTodos
                              })
                            }} /&gt;
                          ) : todo.text}
                        &lt;/p&gt;
                        &lt;button className=&quot;delete&quot; onClick={() =&gt; this.handleDelete(todo.id)}&gt;&lt;/button&gt;
                      &lt;/li&gt;
                    )
                  })}
                &lt;/ul&gt;
              &lt;/React.Fragment&gt;
            )}
            {todos.length &gt; 0 &amp;&amp; (
              &lt;div className=&quot;bar&quot;&gt;
                &lt;span&gt;{todos.length} items left&lt;/span&gt;
                &lt;div&gt;
                  {this.states.map(state =&gt; (
                    &lt;NavLink
                      to={state}
                      key={state}
                      className=&quot;state&quot;
                      onClick={() =&gt; this.setState({ filter: state })}
                    // activeClassName=&quot;active&quot;
                    &gt;
                      {state}
                    &lt;/NavLink&gt;
                  ))}
                &lt;/div&gt;
                &lt;div&gt;&lt;/div&gt;
              &lt;/div&gt;
            )}
          &lt;/header&gt;
        &lt;/HashRouter&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>
</details>
<details>
<summary>本阶段CSS 展开查看</summary>
<pre><code class="language-css">.App {
  width: 600px;
  margin: auto;
  text-align: center;
}

.App-header {
  min-height: 100vh;
  font-size: calc(10px + 2vmin);
}

.header,
.bar {
  display: flex;
  border: 1px solid #ccc;
  padding: 8px;
}

.header input {
  flex: 1;
  border: none;
  outline: none;
  margin-left: 8px;
}

.todos {
  margin: 0;
  border: 1px solid #ccc;
  padding: 0;
}

.todo {
  position: relative;
  padding: 8px;
}

.todo input[type=&quot;checkbox&quot;] {
  zoom: 2;
  -webkit-appearance: none;
}

.todo p {
  background-position: center left;
  background-repeat: no-repeat;
  margin: 0;
  padding: 10px 0 10px 50px;
  flex: 1;
  text-align: left;
}

.todo p {
  background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23ededed%22%20stroke-width%3D%223%22/%3E%3C/svg%3E')
}

.todo p.completed {
  background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23bddad5%22%20stroke-width%3D%223%22/%3E%3Cpath%20fill%3D%22%235dc2af%22%20d%3D%22M72%2025L42%2071%2027%2056l-4%204%2020%2020%2034-52z%22/%3E%3C/svg%3E')
}


.todo .delete {
  position: absolute;
  right: 10px;
  top: 10;
  border: none;
  font-size: 36px;
}

.todo .delete::after {
  content: &quot;x&quot;;
}

.bar {
  justify-content: space-between;
  position: relative;
}

.bar::after {
  content: &quot;&quot;;
  height: 100%;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  height: 44px;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2), 0 8px 0 -3px #f6f6f6, 0 9px 1px -3px rgba(0, 0, 0, 0.2), 0 16px 0 -6px #f6f6f6, 0 17px 2px -6px rgba(0, 0, 0, 0.2);
}

.bar .state {
  color: inherit;
  text-decoration-line: none;
  margin: 0 8px;
  padding: 3px 7px;
}

.state.active {
  border: 1px solid #a00;
}

.todo {
  display: flex;
  align-items: center;
}
</code></pre>
</details>
<p>可以分为Form、Todos、Filters三部分:</p>
<h3 id="form">Form</h3>
<p>该组件拥有自己的局部状态inputText，不需要关心todo列表</p>
<h3 id="todos">Todos</h3>
<p>该组件需要父组件传todos、修改todo信息的回调函数，以及onBlur将所有todo的isEditing设置为false、删除todo项的回调函数</p>
<h3 id="todo">Todo</h3>
<p>其实也可以不拆</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初学Vue的疑惑记录]]></title>
        <id>https://angrychocobo.github.io//post/chu-xue-vue-de-yi-huo-ji-lu</id>
        <link href="https://angrychocobo.github.io//post/chu-xue-vue-de-yi-huo-ji-lu">
        </link>
        <updated>2019-10-24T14:18:53.000Z</updated>
        <content type="html"><![CDATA[<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-30792"><label class="task-list-item-label" for="task-item-30792"> 下面两种写法有何区别？</label><pre><code class="language-js">  &lt;input v-bind:value=&quot;msg&quot; /&gt;  // 为什么这样修改不会导致vue的data变化？  
  &lt;input v-model=&quot;msg&quot; /&gt;
</code></pre>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3940795"><label class="task-list-item-label" for="task-item-3940795"> vue的自定义组件似乎不支持自闭合</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-475930"> 不设置vue的<code>el</code><label class="task-list-item-label" for="task-item-475930"> 不设置vue的`el`会如何？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4836026"><label class="task-list-item-label" for="task-item-4836026"> 生命周期函数的：创建vm.$el并用其替换"el"是什么意思?</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3066135"><label class="task-list-item-label" for="task-item-3066135"> 什么是动态参数？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2508334"> 计算属性实际上是一个函数，但是在直接输出时，如 console.log(vue.reverseMessage); 显示的是调用的结果，并且在html模版中也是这样的效果，why ？<br>
答： 官网提到了：<code>我们提供的函数将用作属性 vm.reserveMessage 的getter函数</code><label class="task-list-item-label" for="task-item-2508334"> 计算属性实际上是一个函数，但是在直接输出时，如 console.log(vue.reverseMessage); 显示的是调用的结果，并且在html模版中也是这样的效果，why ？
答： 官网提到了：`我们提供的函数将用作属性 vm.reserveMessage 的getter函数`，大概是这样</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3769091"><label class="task-list-item-label" for="task-item-3769091"> 为什么: 不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-458653"><label class="task-list-item-label" for="task-item-458653"> is="todo-item" 是干什么的？ 必须的吗？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1161687"><label class="task-list-item-label" for="task-item-1161687"> 只能以数组形式为组件传递props吗？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3600105"><label class="task-list-item-label" for="task-item-3600105"> $emit 方法？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6461002"><label class="task-list-item-label" for="task-item-6461002"> Element UI库 vue add element时的配置信息，选择覆盖ELement变量会如何？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5095451"><label class="task-list-item-label" for="task-item-5095451"> Vue单页面组件，不需要导出（光有模版的情况）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4511138"> <template slot-scope="scope"><label class="task-list-item-label" for="task-item-4511138"> <template slot-scope="scope"> scope是什么？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-664325"><label class="task-list-item-label" for="task-item-664325"> 路由传参数，必须加props：true</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7125385"><label class="task-list-item-label" for="task-item-7125385"> props、data、method都可以直接通过vue实例访问，如何解决可能的重名问题?</label></li>
<li>[ ]</li>
</ul>
<h1 id="发现的其他问题">发现的其他问题</h1>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4730535"><label class="task-list-item-label" for="task-item-4730535"> npm i axios 不需要--save 直接保存到了dependencies中。</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2444448"> 关闭vue-cli的eslint禁止出现未使用的变量：修改package.json的<label class="task-list-item-label" for="task-item-2444448"> 关闭vue-cli的eslint禁止出现未使用的变量：修改package.json的`eslintConfig`</label></p>
<pre><code class="language-json">&quot;rules&quot;: {
    &quot;no-unused-expressions&quot;: 1
  }
</code></pre>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5039958"> 双击需要绑定<label class="task-list-item-label" for="task-item-5039958"> 双击需要绑定`dblclick`</label></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7-24 猜数字游戏]]></title>
        <id>https://angrychocobo.github.io//post/7-24-cai-shu-zi-you-xi</id>
        <link href="https://angrychocobo.github.io//post/7-24-cai-shu-zi-you-xi">
        </link>
        <updated>2019-10-17T01:45:14.000Z</updated>
        <content type="html"><![CDATA[<!-- 这道题自己写的有问题，记录 -->
<h3 id="题目要求">题目要求：</h3>
<blockquote>
<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。</p>
</blockquote>
<p>输入格式:<br>
输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。</p>
<p>输出格式:<br>
在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。</p>
<p>输入样例:<br>
58 4<br>
70<br>
50<br>
56<br>
58<br>
60<br>
-2</p>
<p>输出样例:<br>
Too big<br>
Too small<br>
Too small<br>
Good Guess!</p>
<h3 id="我的错误代码">我的错误代码</h3>
<pre><code class="language-c">#include&lt;stdio.h&gt;
int main() {
    int num, n;
    scanf(&quot;%d%d&quot;, &amp;num, &amp;n);
    int input = 0, times = 1;
    do {
    scanf(&quot;%d&quot;, &amp;input);
    if (input == num) {
        if (times == 1) {
            printf(&quot;Bingo!\n&quot;);
            return 0;
        } else if (times &lt;= 3) {
            printf(&quot;Lucky You!\n&quot;);
            return 0;
        } else if (times  &lt;= n) {
            printf(&quot;Good Guess!\n&quot;);
            return 0;
        } else {
            printf(&quot;Game Over\n&quot;);
            return 0;
        }
    } else if (num &gt; input) {
        printf(&quot;Too small\n&quot;);
        times++;
    } else {
        printf(&quot;Too big\n&quot;);
        times++;
    }
    } while ( input &gt;= 0);
    printf(&quot;Game Over\n&quot;);
}
</code></pre>
<p>我的答案在最后一个测试点总是提示错误，错误原因在于do至少会执行一次，如果第一次输入的值就是负数，会先输出Too small，之后才是Game Over。</p>
<h3 id="正确代码">正确代码</h3>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int count=-1, N=-1;
    int number=-1, guess=-1;
    count = 0;
    scanf(&quot;%d%d&quot;, &amp;number, &amp;N);
    while(count&lt;N){
        scanf(&quot;%d&quot;, &amp;guess);
        count++;
        if(guess&lt;0){
            break;
        }
        if(guess==number){
            if(count==1){
                printf(&quot;Bingo!\n&quot;);
                break;
            }
            else if(count&lt;=3){
                printf(&quot;Lucky You!\n&quot;);
                break;
            }
            else{
                printf(&quot;Good Guess!\n&quot;);
                break;
            }
        }
        else if(guess&lt;number){
            printf(&quot;Too small\n&quot;);
        }
        else{
            printf(&quot;Too big\n&quot;);
        }
    }
    if(guess&lt;0 || count==N&amp;&amp;guess!=number){
        printf(&quot;Game Over\n&quot;);
    }

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[node聊天室]]></title>
        <id>https://angrychocobo.github.io//post/nid</id>
        <link href="https://angrychocobo.github.io//post/nid">
        </link>
        <updated>2019-09-19T08:27:08.000Z</updated>
        <summary type="html"><![CDATA[<p>跟着《node.js实战》实现一个聊天室</p>
]]></summary>
        <content type="html"><![CDATA[<p>跟着《node.js实战》实现一个聊天室</p>
<!-- more -->
<h2 id="需求">需求：</h2>
<ul>
<li>消息发送后会展示给房间内的所有用户</li>
<li>进入房间，系统随机分配一个昵称，可以使用命令的形式修改昵称</li>
<li>用户可以使用命令的形式创建聊天室（或加入）</li>
<li>聊天室名显示为网页的title</li>
<li>消息区域右侧有可用房间列表</li>
</ul>
<h2 id="任务分解">任务分解</h2>
<ol>
<li>样式编写</li>
<li>服务端处理聊天信息</li>
<li>浏览器处理聊天信息</li>
</ol>
<h2 id="需要用到的库或模块">需要用到的库或模块</h2>
<ul>
<li>socket.io实现WebSocket</li>
<li>node-mime</li>
</ul>
<hr>
<h2 id="建立项目及准备工作">建立项目及准备工作</h2>
<p>项目建立就不多说了，项目中建立文件夹<code>public</code>，用来保存静态文件，并在根目录创建server.js</p>
<h2 id="使用node实现一个httpserver">使用node实现一个httpServer</h2>
<pre><code class="language-js">const http = require('http');
const fs = require('fs');
const path = require('path');
const mime = require('mime');

let cache = {};

function send404(res) {
    res.writeHead(404, {
        'Content-Type': 'text/plain;charset=utf-8'
    });
    res.write('Error 404: 资源未找到～');
    res.end();
}

function sendFile(res, filePath, fileContent) {
    res.writeHead(200, {
        'Content-Type': mime.lookup(path.basename(filePath))
    });
    res.end(fileContent);
}

function serveStatic(res, cache, absPath) {
    if (cache[absPath]) {
        sendFile(res, absPath, cache[absPath]);
    } else {
        fs.exists(absPath, exists =&gt; {
            if (exists) {
                fs.readFile(absPath, (err, data) =&gt; {
                    if (err) {
                        send404(res);
                    } else {
                        cache[absPath] = data;
                        sendFile(res, absPath, data);
                    }
                });
            } else {
                send404(res);
            }
        });
    }
}

const server = http.createServer((req, res) =&gt; {
    console.log(req.url);
    let filePath = false;
    if (req.url === '/') {
        filePath = 'public/index.html'
    } else {
        filePath = 'public' + req.url;
    }
    const absPath = './' + filePath;
    serveStatic(res, cache, absPath);
});

server.listen(5555, () =&gt; {
    console.log('server listening on port 5555');
})
</code></pre>
<p>这里要注意：<code>Content-Type</code>需要加上<code>charset=utf-8</code>来保证中文不会乱码</p>
<h1 id="中间犯的错误">中间犯的错误</h1>
<ul>
<li>absPath错误的写成了:</li>
</ul>
<pre><code class="language-js">const absPath = '/ + filePath;
</code></pre>
<ul>
<li>server 运行中，修改静态文件不能看到效果，必须重启server</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[node王者农药全栈开发01]]></title>
        <id>https://angrychocobo.github.io//post/node-wang-zhe-nong-yao-quan-zhan-kai-fa-01</id>
        <link href="https://angrychocobo.github.io//post/node-wang-zhe-nong-yao-quan-zhan-kai-fa-01">
        </link>
        <updated>2019-09-19T08:25:09.000Z</updated>
        <summary type="html"><![CDATA[<p>emm，新发现一个awsome的教程，跟着小哥哥做～</p>
]]></summary>
        <content type="html"><![CDATA[<p>emm，新发现一个awsome的教程，跟着小哥哥做～</p>
<!-- more -->
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3364931"><label class="task-list-item-label" for="task-item-3364931"> 创建分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3193467"><label class="task-list-item-label" for="task-item-3193467"> 修改分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2921039"><label class="task-list-item-label" for="task-item-2921039"> 删除分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2657723"><label class="task-list-item-label" for="task-item-2657723"> 获取分类列表</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-783447"><label class="task-list-item-label" for="task-item-783447"> 为子分类添加父级分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2800921"><label class="task-list-item-label" for="task-item-2800921"> 创建物品</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4941289"><label class="task-list-item-label" for="task-item-4941289"> 修改物品</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9466397"><label class="task-list-item-label" for="task-item-9466397"> 删除物品</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7865039"><label class="task-list-item-label" for="task-item-7865039"> 获取物品列表</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4740914"><label class="task-list-item-label" for="task-item-4740914"> 物品图标上传</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-717578"><label class="task-list-item-label" for="task-item-717578"> 创建英雄</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1855664"><label class="task-list-item-label" for="task-item-1855664"> 修改英雄</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8082706"><label class="task-list-item-label" for="task-item-8082706"> 删除英雄</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-468687"><label class="task-list-item-label" for="task-item-468687"> 获取英雄列表</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1216390"><label class="task-list-item-label" for="task-item-1216390"> 英雄头像上传</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9458337"><label class="task-list-item-label" for="task-item-9458337"> 英雄数据类型</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6771856"><label class="task-list-item-label" for="task-item-6771856"> 英雄技能</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1869065"><label class="task-list-item-label" for="task-item-1869065"> 英雄评分的输入处理（number判断）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7260619"><label class="task-list-item-label" for="task-item-7260619"> 文章管理</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5533425"><label class="task-list-item-label" for="task-item-5533425"> 文章插图上传到服务器</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1200576"><label class="task-list-item-label" for="task-item-1200576"> 广告位管理</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5241838"><label class="task-list-item-label" for="task-item-5241838"> 广告管理</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5054982"><label class="task-list-item-label" for="task-item-5054982"> 管理员账号管理 (bcrypt、 select: false来保证不会重复散列)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7327016"><label class="task-list-item-label" for="task-item-7327016"> 登陆注册</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7060396"><label class="task-list-item-label" for="task-item-7060396"> 服务端登陆校验</label></p>
</li>
</ul>
<p>客户端项目：</p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2126080"><label class="task-list-item-label" for="task-item-2126080"> 使用antd来支持less</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8521182"><label class="task-list-item-label" for="task-item-8521182"> 样式重置（使用antd 已经有了样式重置）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8141318"><label class="task-list-item-label" for="task-item-8141318"> 颜色和字体的css预处理器</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-282908"><label class="task-list-item-label" for="task-item-282908"> flex工具类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3151245"><label class="task-list-item-label" for="task-item-3151245"> 边距工具类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1420364"><label class="task-list-item-label" for="task-item-1420364"> 首页轮播实现</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2180251"><label class="task-list-item-label" for="task-item-2180251"> 精灵图实践</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2010609"><label class="task-list-item-label" for="task-item-2010609"> iconfont实践</label></p>
</li>
</ul>
<p>后期</p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7468899"><label class="task-list-item-label" for="task-item-7468899"> 生产环境编译</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9893428"><label class="task-list-item-label" for="task-item-9893428"> 登陆服务器 ssh root@服务器ip地址</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8471205"><label class="task-list-item-label" for="task-item-8471205"> 若出现错误# REMOTE HOST IDENTIFICATION HAS CHANGED， 输入ssh-keygen -R 服务器端的ip地址</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2679940"><label class="task-list-item-label" for="task-item-2679940"> 安装nginx</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3407889"><label class="task-list-item-label" for="task-item-3407889"> sudo apt install nginx</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1343018"><label class="task-list-item-label" for="task-item-1343018"> 安装mongodb</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5698187"><label class="task-list-item-label" for="task-item-5698187"> sudo apt install mongodb-server</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4107709"><label class="task-list-item-label" for="task-item-4107709"> 进入mongobd</label></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3360488"><label class="task-list-item-label" for="task-item-3360488"> mongo</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2096421"><label class="task-list-item-label" for="task-item-2096421"> show dbs 查看数据库列表</label></p>
</li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7532566"><label class="task-list-item-label" for="task-item-7532566"> 在服务器上安装git</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-43578"><label class="task-list-item-label" for="task-item-43578"> sudo apt install git</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1200376"><label class="task-list-item-label" for="task-item-1200376"> 生成ssh-key</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-25034"><label class="task-list-item-label" for="task-item-25034"> ssh-keygen</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1055968"><label class="task-list-item-label" for="task-item-1055968"> 复制到github上</label></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3082394"><label class="task-list-item-label" for="task-item-3082394"> cat /home/ubuntu/.ssh/id_rsa.pub</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6251207"><label class="task-list-item-label" for="task-item-6251207"> 复制粘贴</label></p>
</li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9448816"><label class="task-list-item-label" for="task-item-9448816"> 配置node</label></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4331275"><label class="task-list-item-label" for="task-item-4331275"> sudo apt install nodejs -y</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6111688"><label class="task-list-item-label" for="task-item-6111688"> sudo apt install npm -y</label></p>
</li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6335682"><label class="task-list-item-label" for="task-item-6335682"> 配置淘宝镜像</label></p>
<pre><code class="language-shell">npm config set registry https://registry.npm.taobao.org
</code></pre>
</li>
</ul>
<p>nrm current</p>
<p>nrm use taobao</p>
<p>npm i -g n 升级node本身</p>
<p>n lateset // 升级到最新版</p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3236809"><label class="task-list-item-label" for="task-item-3236809"> 拉取代码</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4769372"><label class="task-list-item-label" for="task-item-4769372"> 服务器安装pm2</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9527492"><label class="task-list-item-label" for="task-item-9527492"> pm2 start index.js</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2798839"><label class="task-list-item-label" for="task-item-2798839"> pm2 list</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4600028"><label class="task-list-item-label" for="task-item-4600028"> pm2 logs index</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2411260"><label class="task-list-item-label" for="task-item-2411260"> curl //请求一个地址</label></p>
</li>
</ul>
<p>首先创建目录，分为服务端server、客户端web、后台admin。</p>
<p>在admin和web目录中分别使用yarn create umi 生成模版，并且使用 yarn &amp;&amp; yarn start 启动</p>
<p>在admin中建一个新页面/categories/create，安装axios，并封装一个方法，设置baseUrl为http://localhost:5555/admin/api</p>
<p>在server目录安装依赖： express、mongoose、cors，并且创建入口文件server.js，并设置npm命令</p>
<p>在server目录创建routes/admin/index.js路由</p>
<p>在server目录创建plugins/db.js数据库处理文件</p>
<p>在server目录创建models/Category 分类模型文件</p>
<p>设置app.use(express.json())来使express解析post请求的body</p>
<p>创建分类功能 /category post，使用Category模型的create方法来创建</p>
<p>let { id } =  this.props.match.params;</p>
<p>http.get(<code>categories/${id}</code>).then(res  =&gt; {</p>
<p>this.setState({ categories:  res.data });</p>
<p>});</p>
<h2 id="精灵图">精灵图</h2>
<ul>
<li>可以使用spritecow网站来上传精灵图，得到每个图标的位置</li>
</ul>
<h2 id="iconfont">iconfont</h2>
<ul>
<li>阿里iconfont，直接下载代码就可以生成字体和css文件，无需去其他网站处理</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js基础-变量和类型01]]></title>
        <id>https://angrychocobo.github.io//post/js-ji-chu-bian-liang-he-lei-xing-01</id>
        <link href="https://angrychocobo.github.io//post/js-ji-chu-bian-liang-he-lei-xing-01">
        </link>
        <updated>2019-08-10T13:50:58.000Z</updated>
        <summary type="html"><![CDATA[<p>朝花因故未采撷，夕拾依旧烂漫天。从小处开始，一点一点上下求索，漫漫长路就会全然走在脚下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>朝花因故未采撷，夕拾依旧烂漫天。从小处开始，一点一点上下求索，漫漫长路就会全然走在脚下。</p>
<!-- more -->
<p>该学习了，按照知识清单来逐个尝试回答，就当是面试了。</p>
<h3 id="01-javascript规定了几种语言类型">01. <code>JavaScript</code>规定了几种语言类型</h3>
<p>QAQ啥是语言类型？。。。我只知道基本数据类型，是string, number, boolean, undefined, null,  NaN, Symbol, 以及引用数据类型object。</p>
<p>红宝书答案：</p>
<blockquote>
<p>ECMAScript有5种简单数据类型，也叫做基本数据类型： Undefined，Null，Boolean，Number，String，以及1种复杂数据结构Object。实际上ES6加入了新的简单数据结构Symbol，所以一共是7种</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法有穷型分析 hailstone序列]]></title>
        <id>https://angrychocobo.github.io//post/suan-fa-you-qiong-xing-fen-xi-hailstone-xu-lie</id>
        <link href="https://angrychocobo.github.io//post/suan-fa-you-qiong-xing-fen-xi-hailstone-xu-lie">
        </link>
        <updated>2019-08-07T14:20:07.000Z</updated>
        <content type="html"><![CDATA[<p>学到了一个知识点：</p>
<blockquote>
<p>hailstone序列：<br>
1）输入一个正整数n；<br>
（2）如果n=1则结束；<br>
（3）如果n是奇数，则n变为3n+1，否则n变为n/2；<br>
（4）转入第（2）步。</p>
</blockquote>
<pre><code class="language-js">function hailstone(n) {
	var length = 1; 
	while(1 &lt; n) {
		if(n % 2 === 0) {
			n = n/2;
		} else {
			n = 3 * n + 1;
		}
		length++;
		
	}
	return length;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客项目reducer拆分和中间件]]></title>
        <id>https://angrychocobo.github.io//post/bo-ke-xiang-mu-reducer-chai-fen-he-zhong-jian-jian</id>
        <link href="https://angrychocobo.github.io//post/bo-ke-xiang-mu-reducer-chai-fen-he-zhong-jian-jian">
        </link>
        <updated>2019-08-05T11:30:13.000Z</updated>
        <content type="html"><![CDATA[<p>今天放假，继续撸博客项目。</p>
<blockquote>
<p>早晨开始自我怀疑，是不是要继续做下去，当时觉得项目好像没什么意思，即使做出来了自己真的会去用嘛？然后就开始盲目的搜索其他接口，想做点别的项目，还好及时停止了搜索，去打扫了大半个小时的卫生，又洗了几件衣服，吃了外卖，睡一个午觉。 庆幸自己脱离了糟糕的状态，差点放弃~  不过也算是浪费了上午+半个下午了。</p>
</blockquote>
<h2 id="主要进行了如下工作">主要进行了如下工作：</h2>
<ul>
<li>首页样式变更</li>
<li>Header、Footer拆分</li>
<li>reducer拆分，分为了word、post和global</li>
<li>action也拆出来了</li>
<li>使用中间件进行了posts列表的获取</li>
</ul>
<h2 id="遇到的问题">遇到的问题</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8969717"><label class="task-list-item-label" for="task-item-8969717"> 目前设计是在顶层组件去判断global.errorMsg是不是存在，存在就弹message，如接口错误等errorMsg，并且将更新errorMsg的action也放到了globalReducer中；以及global.isFetching会让ui显示加载Spin动画，也是全局的，这样一来Skeleton由于没有数据，就无法显示了。</label></li>
</ul>
<h2 id="反思">反思</h2>
<p>细节理解不够深刻，中间件也只是copy paste阶段，觉得这里应该是高阶函数的知识不懂，导致的懵逼。待补全相关知识（flag）。</p>
<p>记录临时代码</p>
<pre><code class="language-js">export function fetchWords() {

    // Thunk middleware 知道如何处理函数。
    // 这里把 dispatch 方法通过参数的形式传给函数，
    // 以此来让它自己也能 dispatch action。

    return function (dispatch) {

        // 首次 dispatch：更新应用的 state 来通知
        // API 请求发起了。

        dispatch(requestWords())

        // thunk middleware 调用的函数可以有返回值，
        // 它会被当作 dispatch 方法的返回值传递。

        // 这个案例中，我们返回一个等待处理的 promise。
        // 这并不是 redux middleware 所必须的，但这对于我们而言很方便。

        return fetch(`http://127.0.0.1:3001/words`)
            .then(function (response) {
                return response.json();
            },
                // 不要使用 catch，因为会捕获
                // 在 dispatch 和渲染中出现的任何错误，
                // 导致 'Unexpected batch number' 错误。
                // https://github.com/facebook/react/issues/6895
                error =&gt; console.log('An error occurred.', error)
            )
            .then(json =&gt;
            // 可以多次 dispatch！
            // 这里，使用 API 请求结果来更新应用的 state。
            {
                if (json) {
                    setTimeout(() =&gt; {
                        dispatch(receiveWords(json));
                    }, 2000);
                } else {
                    dispatch(fetchError());
                }
            }
            );
    }
}
</code></pre>
]]></content>
    </entry>
</feed>