<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2019-07-29T15:50:36.252Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io//atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io//images/avatar.png</logo>
    <icon>https://angrychocobo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[js Event Loop学习  异步执行顺序 ]]></title>
        <id>https://angrychocobo.github.io//post/js-shi-jian-xun-huan-xue-xi-1</id>
        <link href="https://angrychocobo.github.io//post/js-shi-jian-xun-huan-xue-xi-1">
        </link>
        <updated>2019-07-29T12:40:06.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">console.log('start')

setTimeout(function() {
    console.log('timeout')
}, 0)

new Promise(function(resolve) {
    console.log('promise')
    resolve()
}).then(function() {
    console.log('promise resolved')
})

console.log('end')
</code></pre>
<p>在js的<code>Event Loop</code>中，每一次循环叫做一个<code>tick</code></p>
<h2 id="macrotasktask-和-microtaskjobs">macrotask(task) 和 microtask(jobs)</h2>
<p><strong>在ECMAScript中，microtask称为jobs，macrotask可称为task</strong><br>
task包括</p>
<ul>
<li>script(整体代码)</li>
<li>setTimeout, setInterval, setImmediate,</li>
<li>I/O<br>
ajax请求不属于宏任务，js线程遇到ajax请求，会将请求交给对应的http线程处理，一旦请求返回结果，就会将对应的回调放入宏任务队列，等请求完成执行</li>
</ul>
<p>jobs包括</p>
<ul>
<li>process.nextTick</li>
<li>Promise then</li>
<li>Object.observe(已废弃)</li>
<li>MutationObserver(html5新特性)<br>
运行机制：</li>
</ul>
<ol>
<li>执行一个宏任务（执行栈中没有就从事件队列中获取）</li>
<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>
<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>
<li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li>
<li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）<br>
<img src="https://dailc.github.io/staticResource/blog/basicKnowledge/singlethreadeventloop/js_macrotask_microtask.png" alt=""></li>
</ol>
<p>在每次tick运行时，会从task queue中依次执行，task执行过程中遇到microtask，便将其放到microtasks queue中；当task执行完毕后，检查microtask queue是否为空，若不为空则依次执行microtask queue的microtask；最后，这次tick执行完毕，开始执行第二次tick</p>
<h2 id="浏览器包含哪些进程">浏览器包含哪些进程？</h2>
<ul>
<li>Browser进程：浏览器的主进程（负责协调、主控），只有一个。作用有
<ul>
<li>负责浏览器界面显示，与用户交互。如前进，后退等</li>
<li>负责各个页面的管理，创建和销毁其他进程</li>
<li>将Renderer进程得到的内存中的Bitmap，绘制到用户界面上</li>
</ul>
</li>
<li>第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建</li>
<li>GPU进程：最多一个，用于3D绘制等</li>
<li>浏览器渲染进程（浏览器内核）（Renderer进程，内部是多线程的）：默认每个Tab页面一个进程，互不影响。主要作用为网络资源的管理，下载等</li>
</ul>
<h2 id="浏览器渲染进程浏览器内核的常驻线程">浏览器渲染进程（浏览器内核）的常驻线程</h2>
<p><img src="https://dailc.github.io/staticResource/blog/basicKnowledge/singlethreadeventloop/browser_inner_thread.png" alt=""></p>
<ul>
<li>GUI渲染线程<br>
负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</li>
<li>JS引擎线程<br>
也称为JS内核，负责处理Javascript脚本程序。（例如V8引擎）。JS引擎线程负责解析Javascript脚本，运行代码。JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序。同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li>
<li>事件触发线程<br>
归属于浏览器而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）。当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中。当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。</li>
<li>定时触发器线程<br>
传说中的setInterval与setTimeout所在线程。浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）。因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）。注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。</li>
<li>异步http请求线程<br>
在XMLHttpRequest在连接后是通过浏览器新开一个线程请求。将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。</li>
</ul>
<p>实际上每个任务都会有一个对应的任务源 target source(任务源)，每个任务都放到对应任务源的任务队列中，每个任务源根据不同浏览器或其他引擎 (例如 nodejs) 的实现，自己安排不同的优先级，从而调控某类任务的执行顺序。例如浏览器认为鼠标事件频率很高，所以可以把鼠标事件的任务源优先级设的更高，而 nodejs 中 i/o 优先级更高，就针对此类任务源可以提升执行优先级。</p>
<p>参考文献：</p>
<ul>
<li><a href="http://www.dailichun.com/2018/01/21/js_singlethread_eventloop.html">浏览器中的进程和线程</a></li>
<li><a href="https://github.com/creeperyang/blog/issues/21">从Promise来看JavaScript中的Event Loop、Tasks和Microtasks</a></li>
<li><a href="https://tasaid.com/blog/20180118132704.html">JavaScript 中的 task queues</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[两数之和1 ]]></title>
        <id>https://angrychocobo.github.io//post/liang-shu-zhi-he-1</id>
        <link href="https://angrychocobo.github.io//post/liang-shu-zhi-he-1">
        </link>
        <updated>2019-07-27T14:54:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br>
示例:<br>
给定 nums = [2, 7, 11, 15], target = 9<br>
因为 nums[0] + nums[1] = 2 + 7 = 9<br>
所以返回 [0, 1]</p>
</blockquote>
<h2 id="解法1-直接双循环莽">解法1 直接双循环莽</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
    for(var i=0;i&lt;nums.length;i++){
        for(var j=i+1;j&lt;nums.length;j++){
            if(nums[i]+nums[j]==target)
                return [i,j];
        }
    }
};
</code></pre>
<p>时间复杂度：O(n2)</p>
<h2 id="解法2-两遍哈希表">解法2 两遍哈希表</h2>
<p>首先，js是没有内置的哈希表数据结构的。所以先用java来做这道题，日后记得学习哈希表知识，并尝试自己用js实现一个出来！ @自己</p>
<pre><code class="language-java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i &lt; nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) {
                return new int[] { i, map.get(complement) };
            }
        }
        throw new IllegalArgumentException(&quot;No two sum solution&quot;);
    }
}
</code></pre>
<h2 id="解法3-一遍哈希表">解法3 一遍哈希表</h2>
<pre><code class="language-java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException(&quot;No two sum solution&quot;);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[两数之和2 输入有序数组]]></title>
        <id>https://angrychocobo.github.io//post/liang-shu-zhi-he-2-shu-ru-you-xu-shu-zu</id>
        <link href="https://angrychocobo.github.io//post/liang-shu-zhi-he-2-shu-ru-you-xu-shu-zu">
        </link>
        <updated>2019-07-27T14:36:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目要求">题目要求</h2>
<blockquote>
<p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。<br>
说明:<br>
返回的下标值（index1 和 index2）不是从零开始的。<br>
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br>
示例:<br>
输入: numbers = [2, 7, 11, 15], target = 9<br>
输出: [1,2]<br>
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>
</blockquote>
<h2 id="解法一-直接双重循环">解法一： 直接双重循环</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
   for(var i = 0; i&lt;nums.length; i++) {
       for(var j = i + 1; j&lt;nums.length; j++) {
           if ((nums[i] + nums[j] == target) &amp;&amp; (i &lt; j)) {
               return [i+1, j+1];
           }
       }
   }
};
</code></pre>
<p>上来直接想到的方法，很笨，但是奏效。执行用时380 ms，内存消耗35 MB<br>
时间复杂度为O（n2）</p>
<h2 id="解法二-双指针">解法二： 双指针</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
    var i = 0, j = nums.length -1;
		while (i &lt; j) {
        if (nums[i] + nums[j] == target) {
            return [i+1, j+1]; 
        }
        if(nums[i] + nums[j] &gt; target) {
            j--;
        } else {
            i++;
        }
	}
};
</code></pre>
<p>充分理由给定的数组是<code>有序</code>的这一特性。执行用时80 ms，内存消耗35.2 MB<br>
时间复杂度为O(n)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://angrychocobo.github.io//post/hello-gridea</id>
        <link href="https://angrychocobo.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>