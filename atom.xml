<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2020-03-11T15:03:41.212Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io//atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io//images/avatar.png</logo>
    <icon>https://angrychocobo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[vue的v-for指令渲染的第一个元素没有data-xxx属性，导致样式失效]]></title>
        <id>https://angrychocobo.github.io//post/vue-de-v-for-zhi-ling-xuan-ran-de-di-yi-ge-yuan-su-mei-you-data-xxx-shu-xing-dao-zhi-yang-shi-shi-xiao</id>
        <link href="https://angrychocobo.github.io//post/vue-de-v-for-zhi-ling-xuan-ran-de-di-yi-ge-yuan-su-mei-you-data-xxx-shu-xing-dao-zhi-yang-shi-shi-xiao">
        </link>
        <updated>2020-03-10T01:48:38.000Z</updated>
        <content type="html"><![CDATA[<p>代码很简单：</p>
<pre><code class="language-js">&lt;van-list&gt;
      &lt;van-cell
        class=&quot;friend&quot;
        v-for=&quot;friend in friendRequestList&quot;
        :key=&quot;friend.id&quot;
        @click=&quot;checkFriendInfo(friend)&quot;
      &gt;
        &lt;img :src=&quot;getImgSrc(friend.src)&quot; :alt=&quot;friend.name&quot; /&gt;
        &lt;span class=&quot;username&quot;&gt;{{ friend.username }}&lt;/span&gt;
      &lt;/van-cell&gt;
    &lt;/van-list&gt;

...
computed: {
    friendRequestList() {
      return this.$store.state.friendRequestList
    },
}
...

&lt;style lang=&quot;less&quot; scoped&gt;
.friend-request {
  padding: 0;
  .friend {
    /deep/ .van-cell__value {
      display: flex;
      align-items: center;
      img {
        width: 32px;
        margin-right: 8px;
      }
    }
  }
}
&lt;/style&gt;
</code></pre>
<p>首先猜测是vant的bug，先用简单div试试</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue-Chat项目问题汇总]]></title>
        <id>https://angrychocobo.github.io//post/vue-chat-xiang-mu-wen-ti-hui-zong</id>
        <link href="https://angrychocobo.github.io//post/vue-chat-xiang-mu-wen-ti-hui-zong">
        </link>
        <updated>2020-03-03T11:13:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="socketio和express组合">socket.io和express组合</h2>
<pre><code class="language-js">
const express = require('express')
const app = express()
const http = require('http').createServer(app)
const io = require('socket.io')(http)
http.listen(8888)
// 注意不能用app.listen
</code></pre>
<h2 id="发送一条消息后对应的是sql的insert并不会返回被插入的这条记录于是前端自己保存了临时消息信息push到消息列表中">发送一条消息后，对应的是sql的insert，并不会返回被插入的这条记录，于是前端自己保存了临时消息信息，push到消息列表中</h2>
<h2 id="其他人为自己发送消息可以通过iosocketssockets获取所有连接中的socket从而找到对应的socket让他为用户emit信息达到推送的目的">其他人为自己发送消息，可以通过io.sockets.sockets获取所有连接中的socket，从而找到对应的socket，让他为用户emit信息，达到推送的目的。</h2>
<p>登录用户为A，此时B为A发送了消息，则A的消息列表中就应该出现该消息，可选的两种做法是：</p>
<ol>
<li>重新加载A用户的消息列表</li>
<li>将新消息pushA用户的消息列表<br>
方法2面临的问题就是需要将消息列表提取到更上层的组件中去，因为推送的事件接收必须放到很高级的页面中去，（最起码不能在聊天列表页），会涉及到vuex<br>
而方法1虽然简单，但是不提取相关命令到vuex的话，也会一层层传递命令，所以抽取vuex似乎成了必须的选择</li>
</ol>
<h2 id="推送功能不正常是由于仅在connection时添加了用户信息没有在disconnect的时候清除掉-并且在connection时候添加用户信息是不够的猜测">推送功能不正常，是由于仅在connection时添加了用户信息，没有在disconnect的时候清除掉。并且在connection时候添加用户信息是不够的（猜测）</h2>
<h2 id="一开始是想将用户的头像等信息也放在每一条消息记录数据结构中但是这样一来处理起来麻烦而且数据传输比较大现将其拆分为两部分ajax请求的用户数据和socketio的消息数据">一开始是想将用户的头像等信息也放在每一条消息记录数据结构中，但是这样一来处理起来麻烦，而且数据传输比较大，现将其拆分为两部分：ajax请求的用户数据和socket.io的消息数据</h2>
<h1 id="some-pre-processors-such-as-sass-may-not-be-able-to-parse-properly-in-those-cases-you-can-use-the-deep-or-v-deep-combinator-instead-both-are-aliases-for-and-work-exactly-the-same">Some pre-processors, such as Sass, may not be able to parse &gt;&gt;&gt; properly. In those cases you can use the /deep/ or ::v-deep combinator instead - both are aliases for &gt;&gt;&gt; and work exactly the same.</h1>
<h1 id="实现步骤">实现步骤</h1>
<ol>
<li>vue-cli创建项目</li>
<li>安装必备的插件vue-router、moment、axios、vant并进行配置和封装</li>
<li>配置webpack的目录别名alias</li>
<li>写页面，会话列表页、会话页、好友列表页等</li>
<li>创建数据库，创建user、message表</li>
<li>项目下创建server目录，比使用npm init -y初始化</li>
<li>server目录安装express、cors、socket.io库</li>
<li>express写会话页的消息列表、发送消息接口</li>
<li>会话页调用消息列表、发送消息接口</li>
<li>发现这样无法做到新消息的推送，前端项目引入socket.io-client</li>
<li>在显示消息列表的时候，计划将新发送的消息临时保存，待服务器成功响应之后将临时消息插入到消息列表中</li>
<li>发现在会话页再进行socket.io连接太晚了，想到用vuex抽取相关数据到顶层，并在store中进行socket.io的初始化和相关接口改造</li>
<li>一开始是想将用户的头像等信息也放在每一条消息记录数据结构中，但是这样一来处理起来麻烦，而且数据传输比较大，现将其拆分为两部分：axios请求的用户数据和socket.io的消息数据</li>
<li>放弃query string，使用params来跳转路由传递数据</li>
<li>想已配置的形式实现TabBar，而不必在每个需要的页面都引入组件。暂时没想到方法，先简单实现</li>
<li>封装TabBar，以路由形式配置，可点击跳转到会话列表页、好友列表页和个人中心页</li>
<li>同理封装NavBar，<strong>为了每个引入的地方不需要让页面加入margin-top，为组件加一层div，写入margin-bottom的样式</strong></li>
<li>想到NavBar得支持插槽</li>
<li>支持插槽以后，样式会和其他原有的样式不一致，所以<strong>配置主题</strong> (todo)</li>
<li>好友列表页的搜索功能，搜索结果列表</li>
<li>写搜索好友的接口和sql，<strong>sql的模糊搜索</strong></li>
<li>写好友列表接口和sql</li>
<li>服务器安装nginx git nodejs mysql</li>
<li>生成git key： ssh-keygen</li>
<li>应该在创建一个临时会话列表的表，之前想简单的把有过聊天记录的用户查出来，但仔细想一下，用户是可以移除对话记录的</li>
<li>写会话列表接口的sql</li>
<li>欲实现登陆注册的功能，前端需要对用户的密码进行不可逆的加密，引入库bcrypt</li>
<li>登陆请求写到了vuex中，这样登陆成功后跳转页面就需要在mutation或action中使用router，暂时没想到好的办法，作为commit的payload传吧 ** store直接引入router对象即可 **</li>
<li>要有生成jwt的代码，引入jsonwebtoken库，登陆成功后返回token；以及校验token、存储token的逻辑</li>
<li>将token存到store中；封装axios，将token放到请求header中；axios的error进行统一处理</li>
<li>登陆成功后将token和loggedInUser存到localstorage中</li>
<li>store的token和loggedInUser初值，从localstorage取，以避免刷新页面登陆状态丢失</li>
<li>跳转路由的登陆状态，由路由守卫来实现</li>
<li>**socket存在了store中，刷新就会丢失，难道还要再存到localstorage中？或者说，应该什么时候去创建socket连接?目前放到了store.js最后 **</li>
<li>写用户详情页界面，开始准备实现添加好友功能</li>
<li>添加好友的细节设定：
<ol>
<li>在好友搜索，通过id或username查找，之后点击查看详情，发送好友申请，可选备注内容</li>
<li>同一个目标只能发出一次申请</li>
<li>收到好友请求，会显示在好友列表的专属区域内，点击查看详情，可以通过或拒绝</li>
<li>若通过好友请求，则自动改添加对方到会话列表</li>
<li>若拒绝好友请求，申请人会收到<strong>通知</strong>，并可以再次发出申请</li>
<li><TODO> 设置好友申请的自动通过</li>
</ol>
</li>
<li>申请好友记录 做成 单独表，A申请加B，同时，B也可能申请A，所以通过时候要同时update两条记录</li>
<li>查询当前用户是否是自己的好友，有两种办法：
<ol>
<li>查friend表，看二者id，是否存在对应关系</li>
<li>查makeFriendRecord表，看二者id，是否存在对应关系，并且状态stats是已通过<br>
这里我觉得只应该使用方法1，如果2人成为好友，之后又解除了好友关系，则存在已通过的记录，但实际上并不是好友</li>
</ol>
</li>
<li><TODO> 查询用户信息时，sql不应该返回password(不能简单粗暴使用select *)</li>
<li>查询出来用户信息以后，根据是否是好友来区别显示</li>
<li>如何实现添加好友功能？
<ol>
<li>普通axios发出请求，服务器根据请求的目标id来找该用户是否在线，在线则推送一条通知，并记录到对方的好友申请表中</li>
<li>使用socket.io发出好友请求，后续逻辑一致</li>
<li>普通的axios无法访问到socket.io的socket，并emit，所以只能用方法2</li>
</ol>
</li>
<li>突然想到如果用户不在线，此时收到了好友请求该如何处理（消息同理）。觉得可以先判断一下对方是否在线，在线则推送；创建好友请求表的时候，要加入“已读“字段，当用户请求了”好友请求列表详情“接口时将”未读“的请求设置成”已读“。聊天同理 (还需要整理)</li>
<li>实现查看自己“新的好友“的列表功能</li>
<li><strong>为什么action要规定使用context来dispatch和访问state呢？</strong></li>
<li>计划实现未读消息，
<ol>
<li>每条消息都加入已读的字段，当用户进入和某用户聊天页面后，将对该用户的所有未读状态改为已读，未读消息条数由前端自行处理</li>
<li>但是还要看到和每个人的未读消息数，应该在更新会话列表接口时得到这一数据</li>
</ol>
</li>
<li>系统的添加好友消息，实现方式为fromUserId为特殊id，并且不会出现在好友列表中，也无法搜索出来</li>
<li>注意mock数据时候要补全相关表</li>
<li></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue-Chat项目问题：socket.io uws not found]]></title>
        <id>https://angrychocobo.github.io//post/vue-chat-xiang-mu-wen-ti-socketio-uws-not-found</id>
        <link href="https://angrychocobo.github.io//post/vue-chat-xiang-mu-wen-ti-socketio-uws-not-found">
        </link>
        <updated>2020-03-03T03:07:49.000Z</updated>
        <content type="html"><![CDATA[<p>import io from 'socket.io-client'<br>
If you don't add &quot;-client&quot;, you are using the server component. This won't work, as there is no &quot;fs&quot; on the browser, just on nodejs side.</p>
<p>To get typescript import to work, you need npm install of @types/socket.io-client</p>
<p>Update: Seems, that uws is not required for the client side. I could remove uws without running into errors. Will recheck that, if required...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue-Chat项目问题：设置vant-list的滚动位置到底部]]></title>
        <id>https://angrychocobo.github.io//post/vue-chat-xiang-mu-wen-ti-she-zhi-vant-list-de-gun-dong-wei-zhi-dao-di-bu</id>
        <link href="https://angrychocobo.github.io//post/vue-chat-xiang-mu-wen-ti-she-zhi-vant-list-de-gun-dong-wei-zhi-dao-di-bu">
        </link>
        <updated>2020-03-03T00:41:03.000Z</updated>
        <content type="html"><![CDATA[<p>起因：<br>
消息列表打开以后应该可以显示列表的最后一条，也就是说消息列表会滚动到底部<br>
解决方法：<br>
为van-list设置ref，通过this.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>x</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">refs.xx.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord">.</span></span></span></span>el来获取实际dom,并调用dom.scrollIntoView()来实现</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue-cli支持alias别名的配置方式]]></title>
        <id>https://angrychocobo.github.io//post/vue-cli-zhi-chi-alias-bie-ming-de-pei-zhi-fang-shi</id>
        <link href="https://angrychocobo.github.io//post/vue-cli-zhi-chi-alias-bie-ming-de-pei-zhi-fang-shi">
        </link>
        <updated>2020-02-28T02:16:30.000Z</updated>
        <content type="html"><![CDATA[<p>项目根目录创建一个vue.config.js文件</p>
<pre><code class="language-js">const path = require('path');
function resolve (dir) {
    return path.join(__dirname, dir)
}
module.exports = {
    lintOnSave: true,
    chainWebpack: (config)=&gt;{
        config.resolve.alias
            .set('@$', resolve('src'))
            .set('@assets',resolve('src/assets'))
            .set('@components',resolve('src/components'))
            .set('@views',resolve('src/views'))
            .set('@pages',resolve('src/pages'))
            .set('static',resolve('src/static'))
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript笔记]]></title>
        <id>https://angrychocobo.github.io//post/typescript-bi-ji</id>
        <link href="https://angrychocobo.github.io//post/typescript-bi-ji">
        </link>
        <updated>2020-02-05T06:24:02.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>tsc --init生成的配置文件中，不包含include和exclude，默认会编译目录下所有ts文件（猜测）</li>
<li>配置noImplicitAny来禁止any类型</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jumper]]></title>
        <id>https://angrychocobo.github.io//post/jumper</id>
        <link href="https://angrychocobo.github.io//post/jumper">
        </link>
        <updated>2020-01-09T13:49:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="构成">构成</h2>
<ul>
<li>player</li>
<li>box</li>
</ul>
<h2 id="细节">细节</h2>
<ul>
<li>生成距离的box</li>
<li>camera跟随移动</li>
<li>按压 变形</li>
<li>抛物线移动</li>
<li>碰撞检测
<ul>
<li>跳到平台上</li>
<li>边缘坠落</li>
<li>跳出平台</li>
</ul>
</li>
<li>如何让物体按轨迹移动</li>
<li>生成移动轨迹 -&gt; 生成抛物线轨迹 （创造线条来辅助）</li>
<li>使用精灵来当作HUD</li>
</ul>
<h2 id="坑">坑</h2>
<p>.parameters : Object<br>
一个包含着构造函数中每个参数的对象。在对象实例化之后，对该属性的任何修改都不会改变这个几何体。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[菜鸟学WebGL - 初识WebGL]]></title>
        <id>https://angrychocobo.github.io//post/cai-niao-xue-webgl-chu-shi-webgl</id>
        <link href="https://angrychocobo.github.io//post/cai-niao-xue-webgl-chu-shi-webgl">
        </link>
        <updated>2020-01-02T02:40:30.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>WebGL has a color buffer（颜色缓冲区）, depth buffer（深度缓冲区）, and stencil buffer（模板缓冲区）.</li>
<li>rotation是以欧拉角（Euler）来旋转的</li>
<li>obj.getObjectByName(&quot;firstObj&quot;) //类似getElementById</li>
<li>obj.getObjectById(1); //返回id值为1的3d对象</li>
<li>mesh.visible = false; //设置为false，模型将不会被渲染到场景内</li>
<li>scene.remove(mesh); //将一个模型从场景中删除</li>
<li>scene.children  //模型中的所有3d对象</li>
<li>将按顺序分别将mesh1和mesh2打印出来<br>
mesh1.add(mesh2); //mesh2是mesh1的子元素<br>
scene.add(mesh1); //mesh1是场景对象的子元素<br>
scene.traverse(fucntion(child){<br>
console.log(child);<br>
});</li>
<li>mesh.scale.x = 2; //模型沿x轴放大一倍</li>
<li>使用BufferGeometry比Geometry有更好的性能，适用于放到场景内不会变化的几何体</li>
<li>直接修改已经加入到scene的几何体的width等构造函数传递的参数的值似乎不能生效</li>
<li>官方demo的绘制CircleGeometry（圆几何体）的代码是假的。该代码并不会显示出区块的边缘线</li>
<li>ConeGeometry(圆锥几何体)</li>
<li>MeshBasicMaterial不受光照影响，所以用它来当地板<strong>无法显示阴影</strong></li>
<li>为什么球体的阴影是一个矩形？需要设置光照范围</li>
<li>点光源似乎配置阴影有些特殊</li>
<li>平面光光源（RectAreaLight）可以模拟明亮的窗户或者灯管，但是似乎对性能有严重的影响</li>
<li>.parameters : Object<br>
一个包含着构造函数中每个参数的对象。在对象实例化之后，对该属性的任何修改都不会改变这个几何体。</li>
<li>three.js中，文字mesh需要重设中心点，否则会默认按照左测作为中心点</li>
<li>小的纹理文件不代表会占用的内存小，占用内存（bytes）= width * height * 4 * 1.33</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webgl 笔记模版]]></title>
        <id>https://angrychocobo.github.io//post/webgl-bi-ji-mo-ban</id>
        <link href="https://angrychocobo.github.io//post/webgl-bi-ji-mo-ban">
        </link>
        <updated>2019-12-25T22:13:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="这个模版demo需要的资源">这个模版demo需要的资源</h3>
<h3 id="程序流程分析">程序流程分析</h3>
<h3 id="知识点">知识点</h3>
<h3 id="疑惑">疑惑</h3>
<h3 id="改进">改进</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webgl day2 颜色的影响]]></title>
        <id>https://angrychocobo.github.io//post/webgl-day2-demo-xue-xi</id>
        <link href="https://angrychocobo.github.io//post/webgl-day2-demo-xue-xi">
        </link>
        <updated>2019-12-24T14:35:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="这个模版demo需要的资源">这个模版demo需要的资源</h3>
<ul>
<li>DAT.GUI.min.js</li>
<li>AxisHelper 作者自己写的</li>
</ul>
<h3 id="程序流程分析">程序流程分析</h3>
<ol>
<li>需要创建一个会受到光照影响的Phong球体</li>
<li>使用点光源PointLight</li>
<li></li>
</ol>
<h3 id="知识点">知识点</h3>
<ul>
<li>为物体添加多个材质 SceneUtils.createMultiMaterialObject(geometry, materialArray)</li>
<li>环境光(Ambient light)</li>
<li>漫反射颜色(Diffuse Color)</li>
<li>自发光颜色(Emissive Color)</li>
<li>镜面反射颜色(Specular Color)</li>
<li>光泽度(Shininess amount)</li>
<li>不透明度(Opacity amount)</li>
</ul>
<h3 id="疑惑">疑惑</h3>
<h3 id="改进">改进</h3>
]]></content>
    </entry>
</feed>