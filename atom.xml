<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2020-10-24T11:31:56.506Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io/atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io/images/avatar.png</logo>
    <icon>https://angrychocobo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[阅读element源码的收获]]></title>
        <id>https://angrychocobo.github.io/post/yue-du-element-yuan-ma-de-shou-huo/</id>
        <link href="https://angrychocobo.github.io/post/yue-du-element-yuan-ma-de-shou-huo/">
        </link>
        <updated>2020-09-16T10:52:53.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>提供install方法，以供Vue.use调用，来安装插件</li>
<li>Dialog组件，它用transition的@after-enter和@after-leave事件来触发Dialog组件的opened和closed事件</li>
<li>Button组件，通过this.$slots.default 来判断是否传了插槽内容</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2升级Vue3  踩坑记录]]></title>
        <id>https://angrychocobo.github.io/post/vue2-sheng-ji-vue3-cai-keng-ji-lu/</id>
        <link href="https://angrychocobo.github.io/post/vue2-sheng-ji-vue3-cai-keng-ji-lu/">
        </link>
        <updated>2020-09-15T07:47:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装">安装</h2>
<ol>
<li>由于旧项目是使用vue-cli创建的，所以使用 vue add vue-next来升级为vue3</li>
<li>这步报错，说明vue-cli版本过低，要卸载旧版的vue-cli重新安装
<ol>
<li>yarn global remove @vue/cli</li>
<li>yarn global add @vue/cli</li>
</ol>
</li>
</ol>
<h2 id="旧代码的报错">旧代码的报错</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1440886"><label class="task-list-item-label" for="task-item-1440886"> Vue.prototype.$axios = service    vue3 全局api不再挂载在Vue上，而是在app实例上</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2766518"><label class="task-list-item-label" for="task-item-2766518"> so，创建app实例也改用createApp函数实现 (这一步工具会自动转换)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8986509"><label class="task-list-item-label" for="task-item-8986509"> Vue.use 同理</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1480769"><label class="task-list-item-label" for="task-item-1480769"> '.native' modifier on 'v-on' directive is deprecated</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4182905"><label class="task-list-item-label" for="task-item-4182905"> vant 3 对模态窗v-model="xxx" 改为 v-model:show="xxx" (但是这里不知道怎么配置eslint)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6755738"><label class="task-list-item-label" for="task-item-6755738"> van-tabbar-item :info改为:badge 徽标</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6241220"><label class="task-list-item-label" for="task-item-6241220"> van-nav-bar 插槽不生效了</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Chat 实现记录]]></title>
        <id>https://angrychocobo.github.io/post/react-chat-shi-xian-ji-lu/</id>
        <link href="https://angrychocobo.github.io/post/react-chat-shi-xian-ji-lu/">
        </link>
        <updated>2020-09-10T07:39:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于material-ui以下简称为mui">关于Material UI，以下简称为MUI</h2>
<ul>
<li>在Vant中的Toast组件，MUI对应的组件为Snackbar，但是它没有提供一种以js调用的函数，官网推荐使用 <code>notistack</code> 替代，需要单独安装依赖</li>
</ul>
<h2 id="hook相关">Hook相关</h2>
<ul>
<li>在异步的函数中使用useHistory</li>
</ul>
<h2 id="create-react-app-配置">Create-react-app 配置</h2>
<ul>
<li>配置别名alias：  (暂时不支持ts)
<ul>
<li>安装依赖 customize-cra</li>
<li>使用它的 <code>addWebpackAlias</code> 函数， 需要配合tsconfig.json的paths属性</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leetcode 刷题]]></title>
        <id>https://angrychocobo.github.io/post/leetcode-shua-ti/</id>
        <link href="https://angrychocobo.github.io/post/leetcode-shua-ti/">
        </link>
        <updated>2020-08-05T03:19:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-数组">一、数组</h2>
<p>题目分类	题目编号<br>
数组的遍历	485、495、414、628<br>
统计数组中的元素	645、697、448、442、41、274<br>
数组的改变、移动	453、665、283<br>
二维数组及滚动数组	118、119、661、598、419<br>
数组的旋转	189、396<br>
特定顺序遍历二维数组	54、59、498<br>
二维数组变换	566、48、73、289<br>
前缀和数组	303、304、238<br>
题解	数组篇</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nest迁移聊天服务端记录]]></title>
        <id>https://angrychocobo.github.io/post/nest-qian-yi-liao-tian-fu-wu-duan-ji-lu/</id>
        <link href="https://angrychocobo.github.io/post/nest-qian-yi-liao-tian-fu-wu-duan-ji-lu/">
        </link>
        <updated>2020-07-27T04:26:07.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>开启跨域：app.enableCors()</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[translation is Not linear transform]]></title>
        <id>https://angrychocobo.github.io/post/translation-is-not-linear-transform/</id>
        <link href="https://angrychocobo.github.io/post/translation-is-not-linear-transform/">
        </link>
        <updated>2020-06-07T10:08:37.000Z</updated>
        <content type="html"><![CDATA[<p><code>平移变换</code> 无法 像<code>线性变换</code> 一样，通过两个矩阵相乘的形式来表示坐标。</p>
<p>于是引入了<code>齐次坐标</code>的概念，通过它可以统一的表示坐标变换</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不使用递归如何实现遍历树？]]></title>
        <id>https://angrychocobo.github.io/post/bu-shi-yong-di-gui-ru-he-shi-xian-bian-li-shu/</id>
        <link href="https://angrychocobo.github.io/post/bu-shi-yong-di-gui-ru-he-shi-xian-bian-li-shu/">
        </link>
        <updated>2020-05-31T02:16:13.000Z</updated>
        <content type="html"><![CDATA[<p>起因是实现vue功能函数，向下查找组件的所有后代组件，找到name符合要求的，递归版本的非常容易实现：</p>
<pre><code class="language-js">function _findComponentsDownward(
  component,
  componentName,
  components = []
) {
  const children = component.$children;
  if (children) {
    for (const child of children) {
      if (child.$options.name === componentName) {
        components.push(child);
      }
      _findComponentsDownward(child, componentName, components);
    }
  }
  return components;
}
</code></pre>
<p>但是非递归的要如何实现呢？实际上可以用栈来实现～</p>
<pre><code class="language-js">function findComponentsDownward(component, componentName) {
  const components = [];
  const stack = [];
  stack.push(component);
  while (stack.length) {
    const target = stack.pop();
    if (target.$options.name === componentName) {
      components.push(target);
    }
    const children = target.$children;
    if (children) {
      children.forEach((child) =&gt; {
        stack.push(child);
      });
    }
  }
</code></pre>
<h3 id="原理">原理：</h3>
<ol>
<li>将根组件入栈</li>
<li>循环直到栈为空</li>
<li>取出栈顶组件，判断是否是目标</li>
<li>将该组件的子组件依次入栈（如果存在子组件）</li>
</ol>
<h3 id="感悟">感悟</h3>
<p>实际上应该是树的后续遍历的非递归实现方法。自己数据结构太菜了，导致没有思路</p>
<h1 id="吃了没文化的亏">吃了没文化的亏</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实现自己的ui库]]></title>
        <id>https://angrychocobo.github.io/post/shi-xian-zi-ji-de-ui-ku/</id>
        <link href="https://angrychocobo.github.io/post/shi-xian-zi-ji-de-ui-ku/">
        </link>
        <updated>2020-05-30T09:51:21.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>npm初始化相关的操作步骤略</p>
</blockquote>
<h3 id="跨组件传值的方法">跨组件传值的方法：</h3>
<ul>
<li>
<p>provide/inject， 缺点： provide的值可以被自组件修改，并且不是响应式的 (暂时的理解)</p>
</li>
<li>
<p>自定义dispatch和broadcast （element也是这么干的）</p>
<p>要实现的 dispatch 和 broadcast 方法，将具有以下功能：</p>
</li>
</ul>
<p>在子组件调用 dispatch 方法，向上级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该上级组件已预先通过 $on 监听了这个事件；<br>
相反，在父组件调用 broadcast 方法，向下级指定的组件实例（最近的）上触发自定义事件，并传递数据，且该下级组件已预先通过 $on 监听了这个事件。</p>
<pre><code class="language-js">// emittter.js 
function broadcast(componentName, eventName, params) {
 this.$children.forEach((child) =&gt; {
   const name = child.$options.name;
   if (name === componentName) {
     child.$emit.apply(child, [eventName].concat(params));
   } else {
     broadcast.apply(child, [componentName, eventName].concat([params]));
   }
 });
}
export default {
 methods: {
   dispatch(componentName, eventName, params) {
     console.log(&quot;inner dispatch&quot;, this.$parent);
     let parent = this.$parent || this.$root;
     let name = parent.$options.name;

     while (parent &amp;&amp; (!name || name !== componentName)) {
       parent = parent.$parent;

       if (parent) {
         name = parent.$options.name;
       }
     }
     if (parent) {
       parent.$emit.apply(parent, [eventName].concat(params));
     }
   },
   broadcast(componentName, eventName, params) {
     broadcast.call(this, componentName, eventName, params);
   },
 },
};

</code></pre>
<p>boradcast和dispatch原理就是递归的向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">或</mi></mrow><annotation encoding="application/x-tex">parent或</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">或</span></span></span></span>children寻找name和调用时传入的componentName匹配的vue组件实例，找到了的话，就让它自己<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">由</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">以</mi></mrow><annotation encoding="application/x-tex">emit一个event，由于组件可以</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span></span></span></span>on自己$emit的事件，所以实现了通信的效果。（自己说话自己接收）</p>
<h4 id="这种方法的不足之处">这种方法的不足之处</h4>
<ol>
<li>子组件的name如果修改了，或者没写name，那么通信就会失败; 如果name相同，并且监听了相同的eventName，那么这些相同name的组件都会触发对应的函数。（由于是业务组件，所以这个缺点可以避免）</li>
<li>mounted顺序是先自组件，后父组件，那么如果子组件mounted时候去dispatch，父组件mounted时候<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>n</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">收</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">应</mi><mi mathvariant="normal">的</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">决</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">案</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">父</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">在</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi mathvariant="normal">阶</mi><mi mathvariant="normal">段</mi><mi mathvariant="normal">去</mi></mrow><annotation encoding="application/x-tex">on，就会接收不到对应的event。解决方案： 父组件在created阶段去</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">收</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">应</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">案</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">父</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">阶</span><span class="mord cjk_fallback">段</span><span class="mord cjk_fallback">去</span></span></span></span>on</li>
</ol>
<h4 id="语法分析">语法分析</h4>
<ol>
<li>broadcast和dispatch二者都是递归操作，为何broadcast把函数抽取出去了呢？</li>
<li>child.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>l</mi><mi>y</mi><mo>(</mo><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mo separator="true">,</mo><mo>[</mo><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>]</mo><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>a</mi><mi>t</mi><mo>(</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>s</mi><mo>)</mo><mo>)</mo><mo separator="true">;</mo><mi mathvariant="normal">为</mi><mi mathvariant="normal">什</mi><mi mathvariant="normal">么</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">里</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">改</mi><mi mathvariant="normal">成</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">emit.apply(child, [eventName].concat(params)); 为什么这里不改成 child.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">什</span><span class="mord cjk_fallback">么</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">改</span><span class="mord cjk_fallback">成</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">d</span><span class="mord">.</span></span></span></span>emit.call(child, eventName,params) 呢？</li>
</ol>
<h3 id="form">Form</h3>
<h3 id="formitem">FormItem</h3>
<h3 id="checkbox-checkboxgroup">Checkbox  &amp; CheckboxGroup</h3>
<p>提供trueValue和falseValue来帮助用户实现选中效果，用户不需要再对数据进行Boolean转化<br>
分为两种使用场景：</p>
<ol>
<li>单独使用<br>
单独使用时，自己向FormItem emit挂载事件；自己处理@change事件更新值</li>
<li>成组使用<br>
成组使用时，自己处理@change事件，emit到CheckboxGroup组件来更新自己的值； 同时由于vue的特性，需要将CheckboxGroup的选中项以v-model形式传给每个Checkbox child； 会有value属性，以label传入</li>
</ol>
<h3 id="checkboxgroup">CheckboxGroup</h3>
<h2 id="遇到的坑">遇到的坑</h2>
<ul>
<li>加入了Checkbox以后，表单的submit执行不到回调函数，仔细一查，Form中做了判断，必须： <code>++count === this.fields.length</code>才会resolve，而field.validate在rules为空时直接返回了true</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue事件监听器的细节记录]]></title>
        <id>https://angrychocobo.github.io/post/vue-shi-jian-jian-ting-qi-de-xi-jie-ji-lu/</id>
        <link href="https://angrychocobo.github.io/post/vue-shi-jian-jian-ting-qi-de-xi-jie-ji-lu/">
        </link>
        <updated>2020-05-30T05:10:31.000Z</updated>
        <content type="html"><![CDATA[<p>首先存在如下的dom结构</p>
<pre><code class="language-vue">// Button.vue
&lt;div @click=&quot;handleDivClick&quot;&gt;
    &lt;button class=&quot;my-btn&quot; @click=&quot;handleClick&quot;&gt;
      &lt;slot&gt;&lt;/slot&gt;
    &lt;/button&gt;
  &lt;/div&gt;
</code></pre>
<ol>
<li>默认事件是冒泡的，所以，点击button，调用handleClick之后，会继续调用handleDivClick</li>
<li>想要阻止冒泡，可以用两种办法解决 :
<ol>
<li>handleClick(e) {   e.stopPropagation() }</li>
<li>&lt;button @click.stop=&quot;handleClick&quot;&gt;</li>
</ol>
</li>
<li>若表单中只有一个button，并且没有设置type=&quot;button&quot;，默认type会是submit，点击就会触发表单提交，导致页面刷新，同理有两种办法：
<ol>
<li>handleClick(e) {   e.preventDefault() }</li>
<li>&lt;button @click.prevent=&quot;handleClick&quot;&gt;</li>
</ol>
</li>
<li>虽然触发页面提交成功了，但是实际上如果没有阻止冒泡的话，div还是会触发点击事件的，所以如果像阻止冒泡并阻止事件的默认行为，可以将以上的方法结合使用，原生的写法省略，vue的话就得： &lt;button  @click.stop.prevent=&quot;handleClick&quot;&gt;，反过来也是可以的 @click.prevent.stop</li>
<li>如果div @click.self， button @click ，那么点击button时候，不会触发div的click函数， 表现出来的效果类似阻止冒泡，但是实际上还是冒泡了，如果在div外再套一层dom，就可以看出来冒泡的效果。这个self是如何实现的呢？ 也简单： if ( event.target === event.currentTarget ) { //do something }</li>
<li>passive 一般是用在滚动事件上的修饰符，用来提高移动端的滚动体验。可以提高性能的原因是浏览器每次触发滚动事件时候都会去判断是否存在preventDefault，设置了passive true以后就可以跳过该步骤，从而提高性能（显而易见，passive和 prevent不会同时存在）</li>
<li>native，本意是“原生”，官方给出的解释是<code>监听组件根元素的原生事件</code>，只能用在组件上，比如以上的Button组件， 调用的地方如果 &lt;Button  @click=&quot;show&quot; /&gt; ，则只会触发show函数，无法触发handleClick。设置了 &lt;Button  @click.native=&quot;show&quot; /&gt;  就可以先触发handleClick，再触发show</li>
<li></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue原理学习]]></title>
        <id>https://angrychocobo.github.io/post/vue-yuan-li-xue-xi/</id>
        <link href="https://angrychocobo.github.io/post/vue-yuan-li-xue-xi/">
        </link>
        <updated>2020-05-29T14:59:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="响应式系统的原理">响应式系统的原理</h3>
]]></content>
    </entry>
</feed>