<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2019-10-25T12:38:32.561Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io//atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io//images/avatar.png</logo>
    <icon>https://angrychocobo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[初学Vue的疑惑记录]]></title>
        <id>https://angrychocobo.github.io//post/chu-xue-vue-de-yi-huo-ji-lu</id>
        <link href="https://angrychocobo.github.io//post/chu-xue-vue-de-yi-huo-ji-lu">
        </link>
        <updated>2019-10-24T14:18:53.000Z</updated>
        <content type="html"><![CDATA[<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5285468"><label class="task-list-item-label" for="task-item-5285468"> 下面两种写法有何区别？</label><pre><code class="language-js">  &lt;input v-bind:value=&quot;msg&quot; /&gt;  // 为什么这样修改不会导致vue的data变化？  
  &lt;input v-model=&quot;msg&quot; /&gt;
</code></pre>
</li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7071839"><label class="task-list-item-label" for="task-item-7071839"> vue的自定义组件似乎不支持自闭合</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9651181"> 不设置vue的<code>el</code><label class="task-list-item-label" for="task-item-9651181"> 不设置vue的`el`会如何？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5649955"><label class="task-list-item-label" for="task-item-5649955"> 生命周期函数的：创建vm.$el并用其替换"el"是什么意思?</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9533626"><label class="task-list-item-label" for="task-item-9533626"> 什么是动态参数？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7267983"> 计算属性实际上是一个函数，但是在直接输出时，如 console.log(vue.reverseMessage); 显示的是调用的结果，并且在html模版中也是这样的效果，why ？<br>
答： 官网提到了：<code>我们提供的函数将用作属性 vm.reserveMessage 的getter函数</code><label class="task-list-item-label" for="task-item-7267983"> 计算属性实际上是一个函数，但是在直接输出时，如 console.log(vue.reverseMessage); 显示的是调用的结果，并且在html模版中也是这样的效果，why ？
答： 官网提到了：`我们提供的函数将用作属性 vm.reserveMessage 的getter函数`，大概是这样</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7962154"><label class="task-list-item-label" for="task-item-7962154"> 为什么: 不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8347357"><label class="task-list-item-label" for="task-item-8347357"> is="todo-item" 是干什么的？ 必须的吗？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9256044"><label class="task-list-item-label" for="task-item-9256044"> 只能以数组形式为组件传递props吗？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7120307"><label class="task-list-item-label" for="task-item-7120307"> $emit 方法？</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7-24 猜数字游戏]]></title>
        <id>https://angrychocobo.github.io//post/7-24-cai-shu-zi-you-xi</id>
        <link href="https://angrychocobo.github.io//post/7-24-cai-shu-zi-you-xi">
        </link>
        <updated>2019-10-17T01:45:14.000Z</updated>
        <content type="html"><![CDATA[<!-- 这道题自己写的有问题，记录 -->
<h3 id="题目要求">题目要求：</h3>
<blockquote>
<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。</p>
</blockquote>
<p>输入格式:<br>
输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。</p>
<p>输出格式:<br>
在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。</p>
<p>输入样例:<br>
58 4<br>
70<br>
50<br>
56<br>
58<br>
60<br>
-2</p>
<p>输出样例:<br>
Too big<br>
Too small<br>
Too small<br>
Good Guess!</p>
<h3 id="我的错误代码">我的错误代码</h3>
<pre><code class="language-c">#include&lt;stdio.h&gt;
int main() {
    int num, n;
    scanf(&quot;%d%d&quot;, &amp;num, &amp;n);
    int input = 0, times = 1;
    do {
    scanf(&quot;%d&quot;, &amp;input);
    if (input == num) {
        if (times == 1) {
            printf(&quot;Bingo!\n&quot;);
            return 0;
        } else if (times &lt;= 3) {
            printf(&quot;Lucky You!\n&quot;);
            return 0;
        } else if (times  &lt;= n) {
            printf(&quot;Good Guess!\n&quot;);
            return 0;
        } else {
            printf(&quot;Game Over\n&quot;);
            return 0;
        }
    } else if (num &gt; input) {
        printf(&quot;Too small\n&quot;);
        times++;
    } else {
        printf(&quot;Too big\n&quot;);
        times++;
    }
    } while ( input &gt;= 0);
    printf(&quot;Game Over\n&quot;);
}
</code></pre>
<p>我的答案在最后一个测试点总是提示错误，错误原因在于do至少会执行一次，如果第一次输入的值就是负数，会先输出Too small，之后才是Game Over。</p>
<h3 id="正确代码">正确代码</h3>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(){
    int count=-1, N=-1;
    int number=-1, guess=-1;
    count = 0;
    scanf(&quot;%d%d&quot;, &amp;number, &amp;N);
    while(count&lt;N){
        scanf(&quot;%d&quot;, &amp;guess);
        count++;
        if(guess&lt;0){
            break;
        }
        if(guess==number){
            if(count==1){
                printf(&quot;Bingo!\n&quot;);
                break;
            }
            else if(count&lt;=3){
                printf(&quot;Lucky You!\n&quot;);
                break;
            }
            else{
                printf(&quot;Good Guess!\n&quot;);
                break;
            }
        }
        else if(guess&lt;number){
            printf(&quot;Too small\n&quot;);
        }
        else{
            printf(&quot;Too big\n&quot;);
        }
    }
    if(guess&lt;0 || count==N&amp;&amp;guess!=number){
        printf(&quot;Game Over\n&quot;);
    }

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[node聊天室]]></title>
        <id>https://angrychocobo.github.io//post/nid</id>
        <link href="https://angrychocobo.github.io//post/nid">
        </link>
        <updated>2019-09-19T08:27:08.000Z</updated>
        <summary type="html"><![CDATA[<p>跟着《node.js实战》实现一个聊天室</p>
]]></summary>
        <content type="html"><![CDATA[<p>跟着《node.js实战》实现一个聊天室</p>
<!-- more -->
<h2 id="需求">需求：</h2>
<ul>
<li>消息发送后会展示给房间内的所有用户</li>
<li>进入房间，系统随机分配一个昵称，可以使用命令的形式修改昵称</li>
<li>用户可以使用命令的形式创建聊天室（或加入）</li>
<li>聊天室名显示为网页的title</li>
<li>消息区域右侧有可用房间列表</li>
</ul>
<h2 id="任务分解">任务分解</h2>
<ol>
<li>样式编写</li>
<li>服务端处理聊天信息</li>
<li>浏览器处理聊天信息</li>
</ol>
<h2 id="需要用到的库或模块">需要用到的库或模块</h2>
<ul>
<li>socket.io实现WebSocket</li>
<li>node-mime</li>
</ul>
<hr>
<h2 id="建立项目及准备工作">建立项目及准备工作</h2>
<p>项目建立就不多说了，项目中建立文件夹<code>public</code>，用来保存静态文件，并在根目录创建server.js</p>
<h2 id="使用node实现一个httpserver">使用node实现一个httpServer</h2>
<pre><code class="language-js">const http = require('http');
const fs = require('fs');
const path = require('path');
const mime = require('mime');

let cache = {};

function send404(res) {
    res.writeHead(404, {
        'Content-Type': 'text/plain;charset=utf-8'
    });
    res.write('Error 404: 资源未找到～');
    res.end();
}

function sendFile(res, filePath, fileContent) {
    res.writeHead(200, {
        'Content-Type': mime.lookup(path.basename(filePath))
    });
    res.end(fileContent);
}

function serveStatic(res, cache, absPath) {
    if (cache[absPath]) {
        sendFile(res, absPath, cache[absPath]);
    } else {
        fs.exists(absPath, exists =&gt; {
            if (exists) {
                fs.readFile(absPath, (err, data) =&gt; {
                    if (err) {
                        send404(res);
                    } else {
                        cache[absPath] = data;
                        sendFile(res, absPath, data);
                    }
                });
            } else {
                send404(res);
            }
        });
    }
}

const server = http.createServer((req, res) =&gt; {
    console.log(req.url);
    let filePath = false;
    if (req.url === '/') {
        filePath = 'public/index.html'
    } else {
        filePath = 'public' + req.url;
    }
    const absPath = './' + filePath;
    serveStatic(res, cache, absPath);
});

server.listen(5555, () =&gt; {
    console.log('server listening on port 5555');
})
</code></pre>
<p>这里要注意：<code>Content-Type</code>需要加上<code>charset=utf-8</code>来保证中文不会乱码</p>
<h1 id="中间犯的错误">中间犯的错误</h1>
<ul>
<li>absPath错误的写成了:</li>
</ul>
<pre><code class="language-js">const absPath = '/ + filePath;
</code></pre>
<ul>
<li>server 运行中，修改静态文件不能看到效果，必须重启server</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[node王者农药全栈开发01]]></title>
        <id>https://angrychocobo.github.io//post/node-wang-zhe-nong-yao-quan-zhan-kai-fa-01</id>
        <link href="https://angrychocobo.github.io//post/node-wang-zhe-nong-yao-quan-zhan-kai-fa-01">
        </link>
        <updated>2019-09-19T08:25:09.000Z</updated>
        <summary type="html"><![CDATA[<p>emm，新发现一个awsome的教程，跟着小哥哥做～</p>
]]></summary>
        <content type="html"><![CDATA[<p>emm，新发现一个awsome的教程，跟着小哥哥做～</p>
<!-- more -->
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8167334"><label class="task-list-item-label" for="task-item-8167334"> 创建分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3554623"><label class="task-list-item-label" for="task-item-3554623"> 修改分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9472235"><label class="task-list-item-label" for="task-item-9472235"> 删除分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4578063"><label class="task-list-item-label" for="task-item-4578063"> 获取分类列表</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-652294"><label class="task-list-item-label" for="task-item-652294"> 为子分类添加父级分类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7506007"><label class="task-list-item-label" for="task-item-7506007"> 创建物品</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8148035"><label class="task-list-item-label" for="task-item-8148035"> 修改物品</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6688010"><label class="task-list-item-label" for="task-item-6688010"> 删除物品</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8735185"><label class="task-list-item-label" for="task-item-8735185"> 获取物品列表</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3206024"><label class="task-list-item-label" for="task-item-3206024"> 物品图标上传</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6974281"><label class="task-list-item-label" for="task-item-6974281"> 创建英雄</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2731606"><label class="task-list-item-label" for="task-item-2731606"> 修改英雄</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4417013"><label class="task-list-item-label" for="task-item-4417013"> 删除英雄</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7742463"><label class="task-list-item-label" for="task-item-7742463"> 获取英雄列表</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8628957"><label class="task-list-item-label" for="task-item-8628957"> 英雄头像上传</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2755895"><label class="task-list-item-label" for="task-item-2755895"> 英雄数据类型</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9152874"><label class="task-list-item-label" for="task-item-9152874"> 英雄技能</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1325498"><label class="task-list-item-label" for="task-item-1325498"> 英雄评分的输入处理（number判断）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6320568"><label class="task-list-item-label" for="task-item-6320568"> 文章管理</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2452985"><label class="task-list-item-label" for="task-item-2452985"> 文章插图上传到服务器</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8816670"><label class="task-list-item-label" for="task-item-8816670"> 广告位管理</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8389459"><label class="task-list-item-label" for="task-item-8389459"> 广告管理</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9709566"><label class="task-list-item-label" for="task-item-9709566"> 管理员账号管理 (bcrypt、 select: false来保证不会重复散列)</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-828082"><label class="task-list-item-label" for="task-item-828082"> 登陆注册</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5909689"><label class="task-list-item-label" for="task-item-5909689"> 服务端登陆校验</label></p>
</li>
</ul>
<p>客户端项目：</p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1137499"><label class="task-list-item-label" for="task-item-1137499"> 使用antd来支持less</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6355320"><label class="task-list-item-label" for="task-item-6355320"> 样式重置（使用antd 已经有了样式重置）</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7022522"><label class="task-list-item-label" for="task-item-7022522"> 颜色和字体的css预处理器</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1420395"><label class="task-list-item-label" for="task-item-1420395"> flex工具类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7601658"><label class="task-list-item-label" for="task-item-7601658"> 边距工具类</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6926993"><label class="task-list-item-label" for="task-item-6926993"> 首页轮播实现</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7310517"><label class="task-list-item-label" for="task-item-7310517"> 精灵图实践</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7869498"><label class="task-list-item-label" for="task-item-7869498"> iconfont实践</label></p>
</li>
</ul>
<p>后期</p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7912668"><label class="task-list-item-label" for="task-item-7912668"> 生产环境编译</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3224602"><label class="task-list-item-label" for="task-item-3224602"> 登陆服务器 ssh root@服务器ip地址</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9867421"><label class="task-list-item-label" for="task-item-9867421"> 若出现错误# REMOTE HOST IDENTIFICATION HAS CHANGED， 输入ssh-keygen -R 服务器端的ip地址</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4335254"><label class="task-list-item-label" for="task-item-4335254"> 安装nginx</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6489495"><label class="task-list-item-label" for="task-item-6489495"> sudo apt install nginx</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8708770"><label class="task-list-item-label" for="task-item-8708770"> 安装mongodb</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1059796"><label class="task-list-item-label" for="task-item-1059796"> sudo apt install mongodb-server</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5579361"><label class="task-list-item-label" for="task-item-5579361"> 进入mongobd</label></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9737391"><label class="task-list-item-label" for="task-item-9737391"> mongo</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8044488"><label class="task-list-item-label" for="task-item-8044488"> show dbs 查看数据库列表</label></p>
</li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5147930"><label class="task-list-item-label" for="task-item-5147930"> 在服务器上安装git</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5529831"><label class="task-list-item-label" for="task-item-5529831"> sudo apt install git</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3303841"><label class="task-list-item-label" for="task-item-3303841"> 生成ssh-key</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4019049"><label class="task-list-item-label" for="task-item-4019049"> ssh-keygen</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3598081"><label class="task-list-item-label" for="task-item-3598081"> 复制到github上</label></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9535716"><label class="task-list-item-label" for="task-item-9535716"> cat /home/ubuntu/.ssh/id_rsa.pub</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1686127"><label class="task-list-item-label" for="task-item-1686127"> 复制粘贴</label></p>
</li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7516415"><label class="task-list-item-label" for="task-item-7516415"> 配置node</label></p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1752588"><label class="task-list-item-label" for="task-item-1752588"> sudo apt install nodejs -y</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8582895"><label class="task-list-item-label" for="task-item-8582895"> sudo apt install npm -y</label></p>
</li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3590007"><label class="task-list-item-label" for="task-item-3590007"> 配置淘宝镜像</label></p>
<pre><code class="language-shell">npm config set registry https://registry.npm.taobao.org
</code></pre>
</li>
</ul>
<p>nrm current</p>
<p>nrm use taobao</p>
<p>npm i -g n 升级node本身</p>
<p>n lateset // 升级到最新版</p>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1470181"><label class="task-list-item-label" for="task-item-1470181"> 拉取代码</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1396162"><label class="task-list-item-label" for="task-item-1396162"> 服务器安装pm2</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3351613"><label class="task-list-item-label" for="task-item-3351613"> pm2 start index.js</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7182042"><label class="task-list-item-label" for="task-item-7182042"> pm2 list</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8553190"><label class="task-list-item-label" for="task-item-8553190"> pm2 logs index</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-89990"><label class="task-list-item-label" for="task-item-89990"> curl //请求一个地址</label></p>
</li>
</ul>
<p>首先创建目录，分为服务端server、客户端web、后台admin。</p>
<p>在admin和web目录中分别使用yarn create umi 生成模版，并且使用 yarn &amp;&amp; yarn start 启动</p>
<p>在admin中建一个新页面/categories/create，安装axios，并封装一个方法，设置baseUrl为http://localhost:5555/admin/api</p>
<p>在server目录安装依赖： express、mongoose、cors，并且创建入口文件server.js，并设置npm命令</p>
<p>在server目录创建routes/admin/index.js路由</p>
<p>在server目录创建plugins/db.js数据库处理文件</p>
<p>在server目录创建models/Category 分类模型文件</p>
<p>设置app.use(express.json())来使express解析post请求的body</p>
<p>创建分类功能 /category post，使用Category模型的create方法来创建</p>
<p>let { id } =  this.props.match.params;</p>
<p>http.get(<code>categories/${id}</code>).then(res  =&gt; {</p>
<p>this.setState({ categories:  res.data });</p>
<p>});</p>
<h2 id="精灵图">精灵图</h2>
<ul>
<li>可以使用spritecow网站来上传精灵图，得到每个图标的位置</li>
</ul>
<h2 id="iconfont">iconfont</h2>
<ul>
<li>阿里iconfont，直接下载代码就可以生成字体和css文件，无需去其他网站处理</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js基础-变量和类型01]]></title>
        <id>https://angrychocobo.github.io//post/js-ji-chu-bian-liang-he-lei-xing-01</id>
        <link href="https://angrychocobo.github.io//post/js-ji-chu-bian-liang-he-lei-xing-01">
        </link>
        <updated>2019-08-10T13:50:58.000Z</updated>
        <summary type="html"><![CDATA[<p>朝花因故未采撷，夕拾依旧烂漫天。从小处开始，一点一点上下求索，漫漫长路就会全然走在脚下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>朝花因故未采撷，夕拾依旧烂漫天。从小处开始，一点一点上下求索，漫漫长路就会全然走在脚下。</p>
<!-- more -->
<p>该学习了，按照知识清单来逐个尝试回答，就当是面试了。</p>
<h3 id="01-javascript规定了几种语言类型">01. <code>JavaScript</code>规定了几种语言类型</h3>
<p>QAQ啥是语言类型？。。。我只知道基本数据类型，是string, number, boolean, undefined, null,  NaN, Symbol, 以及引用数据类型object。</p>
<p>红宝书答案：</p>
<blockquote>
<p>ECMAScript有5种简单数据类型，也叫做基本数据类型： Undefined，Null，Boolean，Number，String，以及1种复杂数据结构Object。实际上ES6加入了新的简单数据结构Symbol，所以一共是7种</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法有穷型分析 hailstone序列]]></title>
        <id>https://angrychocobo.github.io//post/suan-fa-you-qiong-xing-fen-xi-hailstone-xu-lie</id>
        <link href="https://angrychocobo.github.io//post/suan-fa-you-qiong-xing-fen-xi-hailstone-xu-lie">
        </link>
        <updated>2019-08-07T14:20:07.000Z</updated>
        <content type="html"><![CDATA[<p>学到了一个知识点：</p>
<blockquote>
<p>hailstone序列：<br>
1）输入一个正整数n；<br>
（2）如果n=1则结束；<br>
（3）如果n是奇数，则n变为3n+1，否则n变为n/2；<br>
（4）转入第（2）步。</p>
</blockquote>
<pre><code class="language-js">function hailstone(n) {
	var length = 1; 
	while(1 &lt; n) {
		if(n % 2 === 0) {
			n = n/2;
		} else {
			n = 3 * n + 1;
		}
		length++;
		
	}
	return length;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客项目reducer拆分和中间件]]></title>
        <id>https://angrychocobo.github.io//post/bo-ke-xiang-mu-reducer-chai-fen-he-zhong-jian-jian</id>
        <link href="https://angrychocobo.github.io//post/bo-ke-xiang-mu-reducer-chai-fen-he-zhong-jian-jian">
        </link>
        <updated>2019-08-05T11:30:13.000Z</updated>
        <content type="html"><![CDATA[<p>今天放假，继续撸博客项目。</p>
<blockquote>
<p>早晨开始自我怀疑，是不是要继续做下去，当时觉得项目好像没什么意思，即使做出来了自己真的会去用嘛？然后就开始盲目的搜索其他接口，想做点别的项目，还好及时停止了搜索，去打扫了大半个小时的卫生，又洗了几件衣服，吃了外卖，睡一个午觉。 庆幸自己脱离了糟糕的状态，差点放弃~  不过也算是浪费了上午+半个下午了。</p>
</blockquote>
<h2 id="主要进行了如下工作">主要进行了如下工作：</h2>
<ul>
<li>首页样式变更</li>
<li>Header、Footer拆分</li>
<li>reducer拆分，分为了word、post和global</li>
<li>action也拆出来了</li>
<li>使用中间件进行了posts列表的获取</li>
</ul>
<h2 id="遇到的问题">遇到的问题</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7833100"><label class="task-list-item-label" for="task-item-7833100"> 目前设计是在顶层组件去判断global.errorMsg是不是存在，存在就弹message，如接口错误等errorMsg，并且将更新errorMsg的action也放到了globalReducer中；以及global.isFetching会让ui显示加载Spin动画，也是全局的，这样一来Skeleton由于没有数据，就无法显示了。</label></li>
</ul>
<h2 id="反思">反思</h2>
<p>细节理解不够深刻，中间件也只是copy paste阶段，觉得这里应该是高阶函数的知识不懂，导致的懵逼。待补全相关知识（flag）。</p>
<p>记录临时代码</p>
<pre><code class="language-js">export function fetchWords() {

    // Thunk middleware 知道如何处理函数。
    // 这里把 dispatch 方法通过参数的形式传给函数，
    // 以此来让它自己也能 dispatch action。

    return function (dispatch) {

        // 首次 dispatch：更新应用的 state 来通知
        // API 请求发起了。

        dispatch(requestWords())

        // thunk middleware 调用的函数可以有返回值，
        // 它会被当作 dispatch 方法的返回值传递。

        // 这个案例中，我们返回一个等待处理的 promise。
        // 这并不是 redux middleware 所必须的，但这对于我们而言很方便。

        return fetch(`http://127.0.0.1:3001/words`)
            .then(function (response) {
                return response.json();
            },
                // 不要使用 catch，因为会捕获
                // 在 dispatch 和渲染中出现的任何错误，
                // 导致 'Unexpected batch number' 错误。
                // https://github.com/facebook/react/issues/6895
                error =&gt; console.log('An error occurred.', error)
            )
            .then(json =&gt;
            // 可以多次 dispatch！
            // 这里，使用 API 请求结果来更新应用的 state。
            {
                if (json) {
                    setTimeout(() =&gt; {
                        dispatch(receiveWords(json));
                    }, 2000);
                } else {
                    dispatch(fetchError());
                }
            }
            );
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[redux中间件临时记录]]></title>
        <id>https://angrychocobo.github.io//post/redux-zhong-jian-jian-lin-shi-ji-lu</id>
        <link href="https://angrychocobo.github.io//post/redux-zhong-jian-jian-lin-shi-ji-lu">
        </link>
        <updated>2019-08-05T11:27:32.000Z</updated>
        <content type="html"><![CDATA[<p>export function fetchWords() {</p>
<pre><code>// Thunk middleware 知道如何处理函数。
// 这里把 dispatch 方法通过参数的形式传给函数，
// 以此来让它自己也能 dispatch action。

return function (dispatch) {

    // 首次 dispatch：更新应用的 state 来通知
    // API 请求发起了。

    dispatch(requestWords())

    // thunk middleware 调用的函数可以有返回值，
    // 它会被当作 dispatch 方法的返回值传递。

    // 这个案例中，我们返回一个等待处理的 promise。
    // 这并不是 redux middleware 所必须的，但这对于我们而言很方便。

    return fetch(`http://127.0.0.1:3001/words`)
        .then(function (response) {
            return response.json();
        },
            // 不要使用 catch，因为会捕获
            // 在 dispatch 和渲染中出现的任何错误，
            // 导致 'Unexpected batch number' 错误。
            // https://github.com/facebook/react/issues/6895
            error =&gt; console.log('An error occurred.', error)
        )
        .then(json =&gt;
        // 可以多次 dispatch！
        // 这里，使用 API 请求结果来更新应用的 state。
        {
            if (json) {
                setTimeout(() =&gt; {
                    dispatch(receiveWords(json));
                }, 2000);
            } else {
                dispatch(fetchError());
            }

        }
        );
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用fetch请求接口并设置cookie未生效的原因]]></title>
        <id>https://angrychocobo.github.io//post/shi-yong-fetch-qing-qiu-jie-kou-bing-she-zhi-cookie-wei-sheng-xiao-de-yuan-yin</id>
        <link href="https://angrychocobo.github.io//post/shi-yong-fetch-qing-qiu-jie-kou-bing-she-zhi-cookie-wei-sheng-xiao-de-yuan-yin">
        </link>
        <updated>2019-08-01T16:11:47.000Z</updated>
        <content type="html"><![CDATA[<p>//使用fetch，必须加上参数credentials: 'include'才可以成功设置cookie</p>
<p>//但是这样一来又有了跨域的问题。晕，先睡了</p>
<p>似乎是跨域引起的无法设置cookie，若使用ajax的话需要加上设置<code>xhrFields: { withCredentials: true }</code>。emm 很迷。懵逼。</p>
<p>那么fetch呢..</p>
<p>还有坑，chrome中，通过localhost访问项目不能看到服务端设置的cookie。又一个迷。懵逼x2</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不使用reject  让create-react-app支持less的方法]]></title>
        <id>https://angrychocobo.github.io//post/rang-create-react-app-bu-shi-yong-reject-zhi-chi-less-de-fang-fa</id>
        <link href="https://angrychocobo.github.io//post/rang-create-react-app-bu-shi-yong-reject-zhi-chi-less-de-fang-fa">
        </link>
        <updated>2019-07-31T14:17:00.000Z</updated>
        <content type="html"><![CDATA[<p>create-react-app是默认支持sass的，但是less需要做一些特殊处理：</p>
<ol>
<li>对创建好的create-react-app项目安装依赖包：</li>
</ol>
<pre><code class="language-node">npm install react-app-rewired --save
npm install react-app-rewire-less --save
</code></pre>
<ol start="2">
<li>修改项目的package.json：</li>
</ol>
<pre><code class="language-json">  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;react-scripts start&quot;,
    &quot;build&quot;: &quot;react-scripts build&quot;,
    &quot;test&quot;: &quot;react-scripts test&quot;,
    &quot;eject&quot;: &quot;react-scripts eject&quot;
  }
</code></pre>
<ol start="3">
<li>项目根目录创建文件config-overrides.js</li>
</ol>
<pre><code class="language-js">const {
    override,
    fixBabelImports,
    addLessLoader
} = require('customize-cra');

module.exports = override(
    fixBabelImports('import', {
        libraryName: 'antd',
        libraryDirectory: 'es',
        style: true,
    }),
    addLessLoader({
        javascriptEnabled: true,
        modifyVars: {
            '@primary-color': '#1DA57A'
        },
    })
);
</code></pre>
<p>顺便解释一下，网上搜到的一些帖子已经过时，上述方法是通过Ant Design配置主题的方法中抽取的，可以实现需求。嘿嘿，如果你是用ant design当作ui库开发的话，就一举两得啦～</p>
]]></content>
    </entry>
</feed>