<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2020-03-02T15:30:44.325Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io//atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io//images/avatar.png</logo>
    <icon>https://angrychocobo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[Vue-cli支持alias别名的配置方式]]></title>
        <id>https://angrychocobo.github.io//post/vue-cli-zhi-chi-alias-bie-ming-de-pei-zhi-fang-shi</id>
        <link href="https://angrychocobo.github.io//post/vue-cli-zhi-chi-alias-bie-ming-de-pei-zhi-fang-shi">
        </link>
        <updated>2020-02-28T02:16:30.000Z</updated>
        <content type="html"><![CDATA[<p>项目根目录创建一个vue.config.js文件</p>
<pre><code class="language-js">const path = require('path');
function resolve (dir) {
    return path.join(__dirname, dir)
}
module.exports = {
    lintOnSave: true,
    chainWebpack: (config)=&gt;{
        config.resolve.alias
            .set('@$', resolve('src'))
            .set('@assets',resolve('src/assets'))
            .set('@components',resolve('src/components'))
            .set('@views',resolve('src/views'))
            .set('@pages',resolve('src/pages'))
            .set('static',resolve('src/static'))
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript笔记]]></title>
        <id>https://angrychocobo.github.io//post/typescript-bi-ji</id>
        <link href="https://angrychocobo.github.io//post/typescript-bi-ji">
        </link>
        <updated>2020-02-05T06:24:02.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>tsc --init生成的配置文件中，不包含include和exclude，默认会编译目录下所有ts文件（猜测）</li>
<li>配置noImplicitAny来禁止any类型</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jumper]]></title>
        <id>https://angrychocobo.github.io//post/jumper</id>
        <link href="https://angrychocobo.github.io//post/jumper">
        </link>
        <updated>2020-01-09T13:49:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="构成">构成</h2>
<ul>
<li>player</li>
<li>box</li>
</ul>
<h2 id="细节">细节</h2>
<ul>
<li>生成距离的box</li>
<li>camera跟随移动</li>
<li>按压 变形</li>
<li>抛物线移动</li>
<li>碰撞检测
<ul>
<li>跳到平台上</li>
<li>边缘坠落</li>
<li>跳出平台</li>
</ul>
</li>
<li>如何让物体按轨迹移动</li>
<li>生成移动轨迹 -&gt; 生成抛物线轨迹 （创造线条来辅助）</li>
<li>使用精灵来当作HUD</li>
</ul>
<h2 id="坑">坑</h2>
<p>.parameters : Object<br>
一个包含着构造函数中每个参数的对象。在对象实例化之后，对该属性的任何修改都不会改变这个几何体。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[菜鸟学WebGL - 初识WebGL]]></title>
        <id>https://angrychocobo.github.io//post/cai-niao-xue-webgl-chu-shi-webgl</id>
        <link href="https://angrychocobo.github.io//post/cai-niao-xue-webgl-chu-shi-webgl">
        </link>
        <updated>2020-01-02T02:40:30.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>WebGL has a color buffer（颜色缓冲区）, depth buffer（深度缓冲区）, and stencil buffer（模板缓冲区）.</li>
<li>rotation是以欧拉角（Euler）来旋转的</li>
<li>obj.getObjectByName(&quot;firstObj&quot;) //类似getElementById</li>
<li>obj.getObjectById(1); //返回id值为1的3d对象</li>
<li>mesh.visible = false; //设置为false，模型将不会被渲染到场景内</li>
<li>scene.remove(mesh); //将一个模型从场景中删除</li>
<li>scene.children  //模型中的所有3d对象</li>
<li>将按顺序分别将mesh1和mesh2打印出来<br>
mesh1.add(mesh2); //mesh2是mesh1的子元素<br>
scene.add(mesh1); //mesh1是场景对象的子元素<br>
scene.traverse(fucntion(child){<br>
console.log(child);<br>
});</li>
<li>mesh.scale.x = 2; //模型沿x轴放大一倍</li>
<li>使用BufferGeometry比Geometry有更好的性能，适用于放到场景内不会变化的几何体</li>
<li>直接修改已经加入到scene的几何体的width等构造函数传递的参数的值似乎不能生效</li>
<li>官方demo的绘制CircleGeometry（圆几何体）的代码是假的。该代码并不会显示出区块的边缘线</li>
<li>ConeGeometry(圆锥几何体)</li>
<li>MeshBasicMaterial不受光照影响，所以用它来当地板<strong>无法显示阴影</strong></li>
<li>为什么球体的阴影是一个矩形？需要设置光照范围</li>
<li>点光源似乎配置阴影有些特殊</li>
<li>平面光光源（RectAreaLight）可以模拟明亮的窗户或者灯管，但是似乎对性能有严重的影响</li>
<li>.parameters : Object<br>
一个包含着构造函数中每个参数的对象。在对象实例化之后，对该属性的任何修改都不会改变这个几何体。</li>
<li>three.js中，文字mesh需要重设中心点，否则会默认按照左测作为中心点</li>
<li>小的纹理文件不代表会占用的内存小，占用内存（bytes）= width * height * 4 * 1.33</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webgl 笔记模版]]></title>
        <id>https://angrychocobo.github.io//post/webgl-bi-ji-mo-ban</id>
        <link href="https://angrychocobo.github.io//post/webgl-bi-ji-mo-ban">
        </link>
        <updated>2019-12-25T22:13:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="这个模版demo需要的资源">这个模版demo需要的资源</h3>
<h3 id="程序流程分析">程序流程分析</h3>
<h3 id="知识点">知识点</h3>
<h3 id="疑惑">疑惑</h3>
<h3 id="改进">改进</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webgl day2 颜色的影响]]></title>
        <id>https://angrychocobo.github.io//post/webgl-day2-demo-xue-xi</id>
        <link href="https://angrychocobo.github.io//post/webgl-day2-demo-xue-xi">
        </link>
        <updated>2019-12-24T14:35:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="这个模版demo需要的资源">这个模版demo需要的资源</h3>
<ul>
<li>DAT.GUI.min.js</li>
<li>AxisHelper 作者自己写的</li>
</ul>
<h3 id="程序流程分析">程序流程分析</h3>
<ol>
<li>需要创建一个会受到光照影响的Phong球体</li>
<li>使用点光源PointLight</li>
<li></li>
</ol>
<h3 id="知识点">知识点</h3>
<ul>
<li>为物体添加多个材质 SceneUtils.createMultiMaterialObject(geometry, materialArray)</li>
<li>环境光(Ambient light)</li>
<li>漫反射颜色(Diffuse Color)</li>
<li>自发光颜色(Emissive Color)</li>
<li>镜面反射颜色(Specular Color)</li>
<li>光泽度(Shininess amount)</li>
<li>不透明度(Opacity amount)</li>
</ul>
<h3 id="疑惑">疑惑</h3>
<h3 id="改进">改进</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webgl day1 基础的几何球体]]></title>
        <id>https://angrychocobo.github.io//post/webgl-day1</id>
        <link href="https://angrychocobo.github.io//post/webgl-day1">
        </link>
        <updated>2019-12-23T21:49:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>找到一个好的demo网站，觉得从代码入手比看书会有感觉，互相印证吧～<br>
每日争取做完一个demo</p>
</blockquote>
<h3 id="这个模版demo需要的资源">这个模版demo需要的资源</h3>
<ul>
<li>KeyboardState.js 猜测是一个按键处理程序</li>
<li>THREE.clock 时钟？ 程序中没有用到</li>
<li>Detector.js 创建了全屏幕大小的canvas</li>
<li>Stats.js 插件实现了性能、Fps监控</li>
<li>OrbitControls.js 轨道控制器，实现了拖拽改变相机位置</li>
<li>全屏幕、改变尺寸js和jquery不再赘述</li>
</ul>
<h3 id="程序流程分析">程序流程分析</h3>
<ol>
<li>首先初始化一些全局变量</li>
<li>之后就是两个方法调用<br>
init()初始化<br>
animate()启动</li>
</ol>
<h3 id="知识点">知识点</h3>
<ul>
<li>MeshBasicMaterial：基础网格材质，以简单着色的方式来绘制几何体的材质，不受光照影响 （这就是简单cube可以不加光源显示的原因吗？）</li>
<li>SphereGeometry： 球几何体</li>
<li>MeshLambertMaterial： 一种非光泽表面的材质，没有镜面高光，常用来模拟未经处理的木材或石材</li>
<li>MeshPhongMaterial: 该材质可以模拟具有镜面高光的光泽表面（例如涂漆木材）</li>
<li>Skybox： 天空盒</li>
<li>创建相同的物体，可以使用Geometry.clone()方法</li>
<li>scene.fog 添加雾的效果，使用FogExp2对象可创建离相机越远，雾越重的效果；Fog对象创建线性雾 （虽然我没看出区别）</li>
<li>作者添加了一个球体，放在了和光源一样的位置上来展示灯光的位置 lightSphere.position = light.position</li>
</ul>
<h3 id="疑惑">疑惑</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7320346"><label class="task-list-item-label" for="task-item-7320346"> NEAR设置了0.1， FAR 设置到了20000，如何看待这组大小？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6011950"><label class="task-list-item-label" for="task-item-6011950"> 创建WebGlRenderer时的参数antialias(抗锯齿)有什么用意？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9182820"><label class="task-list-item-label" for="task-item-9182820"> 为什么OrbitControls需要在requestAnimationFrame的循环中updata自己呢？（State.js也需要）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1383312"><label class="task-list-item-label" for="task-item-1383312"> floorTexture.repeat.set(10, 10) 值变大，并不是纹理的尺寸变大，具体含义？</label></li>
</ul>
<h3 id="改进">改进</h3>
<ul>
<li>ImageUtils.loadTexture 来加载纹理的方式已经不建议使用了,新的api为 TextureLoader</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Three.js和webgl学习过程遇到的问题]]></title>
        <id>https://angrychocobo.github.io//post/threejs-he-webgl-xue-xi-guo-cheng-yu-dao-de-wen-ti</id>
        <link href="https://angrychocobo.github.io//post/threejs-he-webgl-xue-xi-guo-cheng-yu-dao-de-wen-ti">
        </link>
        <updated>2019-12-23T21:28:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="q下载的gltf模型路径">Q：下载的gltf模型路径</h3>
<p>要么配置webpacl-loader来 加载； 要么使用相对路径，将模型放到html文件的同级路径下（对于vue-cli项目就是public目录）</p>
<h3 id="q加载下载的gltf模型后黑漆漆的什么都看不到">Q：加载下载的gltf模型后黑漆漆的什么都看不到</h3>
<p>需要加入光源才能看到。（但是为啥可以看到加入的Cube呢？？？）</p>
<pre><code class="language-js">var light = new THREE.PointLight(0xFFFF00);
/* position the light so it shines on the cube (x, y, z) */
light.position.set(10, 0, 25);
this.scene.add(light);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新的野望]]></title>
        <id>https://angrychocobo.github.io//post/xin-de-ye-wang</id>
        <link href="https://angrychocobo.github.io//post/xin-de-ye-wang">
        </link>
        <updated>2019-12-23T15:24:07.000Z</updated>
        <content type="html"><![CDATA[<p>最近突然想开始搞webgl，已记不起诱因，静下心来想短时间对前端的职业发展并无太大的好处，而且也算是另一个方向，说是转行也没什么毛病，但是真的想去做。<br>
大学时期有过类似的情绪，那是大二左右，想搞安卓，并幻想了之后以安卓为生的情景，买了几本书，敲了几天代码，不了了之...<br>
安卓那时候我记得是觉得可以在手机上看到效果，很有成就感，如今的webgl我想也有类似的原因吧！不能给自己带来成就感的东西，学习起来当然会觉得枯燥吧～<br>
当然webgl难度会比web开发难许多，更是考验我残废的数学功底，但是我还是想去试试，试试自己究竟能做到什么程度，在兴趣的支持下，面对困难究竟能坚持多久...<br>
<code>整</code><br>
2019.12.23 晚23:30</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue Todo项目]]></title>
        <id>https://angrychocobo.github.io//post/vue-todo-xiang-mu</id>
        <link href="https://angrychocobo.github.io//post/vue-todo-xiang-mu">
        </link>
        <updated>2019-10-31T11:00:58.000Z</updated>
        <content type="html"><![CDATA[<p>首先html结构直接从网上扒下来，然后删删改改，使用Vue实现...</p>
<p>这里首次感受到了相较于React，Vue的强大和便利之处：可以很方便的在html页面进行修改，不像React一样需要用jsx重写，略high。</p>
<h3 id="记录遇到的问题">记录遇到的问题</h3>
<ul class="contains-task-list">
<li class="task-list-item">
<p><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9085295"><label class="task-list-item-label" for="task-item-9085295"> 双击todo，使其可编辑的回调函数，React是onDoubleClick，而Vue是dblclick，实际上原生就是ondblclick，之前一直以为是doubleclick</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8006204"><label class="task-list-item-label" for="task-item-8006204"> 双击todo，使其可编辑，input显示出来自动获取焦点</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9566778"><label class="task-list-item-label" for="task-item-9566778"> 子组件input如何修改父组件传递的input值？</label></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8676385"><label class="task-list-item-label" for="task-item-8676385"> 可通过子组件调用$emit来实现，并且子组件获得的props key和传递的不同</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2392344"><label class="task-list-item-label" for="task-item-2392344"> 父组件为子组件传递回调函数，由子组件调用</label></li>
</ul>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7442862"> <Todos v-bind:todos="todos"> 和 <Todos todos="todos"><label class="task-list-item-label" for="task-item-7442862"> <Todos v-bind:todos="todos"> 和 <Todos todos="todos">区别</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5212368"> 如何实现 <a v-bind:href="#/item"> 答： <label class="task-list-item-label" for="task-item-5212368"> 如何实现 <a v-bind:href="#/item"> 答： <a v-bind:href="'#' + item "></label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5561127"><label class="task-list-item-label" for="task-item-5561127"> 如何调用父组件的自定义指令</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-742831"><label class="task-list-item-label" for="task-item-742831"> 为什么key只能是数字或字符串？</label></p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2294925"><label class="task-list-item-label" for="task-item-2294925"> v-if切换组件时，是否会导致子组件的create和destory ?</label></p>
</li>
</ul>
<pre><code class="language-vue">使用自定义指令实现
&lt;input type=&quot;text&quot; ...  v-todo-focus=&quot;todo === editedTodo&quot;&gt;
directives: {
			'todo-focus': function (el, binding) {
				if (binding.value) {
					el.focus();
				}
			}
		}
</code></pre>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1457889"><label class="task-list-item-label" for="task-item-1457889"> 删除所有todo时，todos为空数组，但为何computed为空时，字段都delete了呢？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2541885"><label class="task-list-item-label" for="task-item-2541885"> @click="someFun(value)" 绑定的不是函数的返回值？</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6421054"><label class="task-list-item-label" for="task-item-6421054"> 如何通过watch实现修改todos时自动记录到localStorage ?</label></li>
</ul>
<pre><code class="language-vue">watch: {
        todos: {
            deep: true,
            handler: todoStorage.save
        }
    }
</code></pre>
<h3 id="可以优化的点">可以优化的点</h3>
<ul>
<li>按键是否回车可以改为 @keyup.enter=&quot;xx&quot; 来处理</li>
<li></li>
</ul>
]]></content>
    </entry>
</feed>