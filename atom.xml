<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://angrychocobo.github.io/</id>
    <title>老桔的小站（悄咪咪</title>
    <updated>2019-07-27T15:09:10.562Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://angrychocobo.github.io/"/>
    <link rel="self" href="https://angrychocobo.github.io//atom.xml"/>
    <subtitle>边学边忘</subtitle>
    <logo>https://angrychocobo.github.io//images/avatar.png</logo>
    <icon>https://angrychocobo.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 老桔的小站（悄咪咪</rights>
    <entry>
        <title type="html"><![CDATA[两数之和1 ]]></title>
        <id>https://angrychocobo.github.io//post/liang-shu-zhi-he-1</id>
        <link href="https://angrychocobo.github.io//post/liang-shu-zhi-he-1">
        </link>
        <updated>2019-07-27T14:54:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2>
<blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br>
示例:<br>
给定 nums = [2, 7, 11, 15], target = 9<br>
因为 nums[0] + nums[1] = 2 + 7 = 9<br>
所以返回 [0, 1]</p>
</blockquote>
<h2 id="解法1-直接双循环莽">解法1 直接双循环莽</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
    for(var i=0;i&lt;nums.length;i++){
        for(var j=i+1;j&lt;nums.length;j++){
            if(nums[i]+nums[j]==target)
                return [i,j];
        }
    }
};
</code></pre>
<p>时间复杂度：O(n2)</p>
<h2 id="解法2-两遍哈希表">解法2 两遍哈希表</h2>
<p>首先，js是没有内置的哈希表数据结构的。所以先用java来做这道题，日后记得学习哈希表知识，并尝试自己用js实现一个出来！ @自己</p>
<pre><code class="language-java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i &lt; nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) {
                return new int[] { i, map.get(complement) };
            }
        }
        throw new IllegalArgumentException(&quot;No two sum solution&quot;);
    }
}
</code></pre>
<h2 id="解法3-一遍哈希表">解法3 一遍哈希表</h2>
<pre><code class="language-java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException(&quot;No two sum solution&quot;);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[两数之和2 输入有序数组]]></title>
        <id>https://angrychocobo.github.io//post/liang-shu-zhi-he-2-shu-ru-you-xu-shu-zu</id>
        <link href="https://angrychocobo.github.io//post/liang-shu-zhi-he-2-shu-ru-you-xu-shu-zu">
        </link>
        <updated>2019-07-27T14:36:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目要求">题目要求</h2>
<blockquote>
<p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。<br>
说明:<br>
返回的下标值（index1 和 index2）不是从零开始的。<br>
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br>
示例:<br>
输入: numbers = [2, 7, 11, 15], target = 9<br>
输出: [1,2]<br>
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>
</blockquote>
<h2 id="解法一-直接双重循环">解法一： 直接双重循环</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
   for(var i = 0; i&lt;nums.length; i++) {
       for(var j = i + 1; j&lt;nums.length; j++) {
           if ((nums[i] + nums[j] == target) &amp;&amp; (i &lt; j)) {
               return [i+1, j+1];
           }
       }
   }
};
</code></pre>
<p>上来直接想到的方法，很笨，但是奏效。执行用时380 ms，内存消耗35 MB<br>
时间复杂度为O（n2）</p>
<h2 id="解法二-双指针">解法二： 双指针</h2>
<pre><code class="language-js">var twoSum = function(nums, target) {
    var i = 0, j = nums.length -1;
		while (i &lt; j) {
        if (nums[i] + nums[j] == target) {
            return [i+1, j+1]; 
        }
        if(nums[i] + nums[j] &gt; target) {
            j--;
        } else {
            i++;
        }
	}
};
</code></pre>
<p>充分理由给定的数组是<code>有序</code>的这一特性。执行用时80 ms，内存消耗35.2 MB<br>
时间复杂度为O(n)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://angrychocobo.github.io//post/hello-gridea</id>
        <link href="https://angrychocobo.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>